/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSCardholderPhoneNumber type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSCardholderPhoneNumber{}

// ThreeDSCardholderPhoneNumber struct for ThreeDSCardholderPhoneNumber
type ThreeDSCardholderPhoneNumber struct {
	CountryCode NullableString `json:"country_code,omitempty"`
	Number      NullableString `json:"number,omitempty"`
}

// NewThreeDSCardholderPhoneNumber instantiates a new ThreeDSCardholderPhoneNumber object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSCardholderPhoneNumber() *ThreeDSCardholderPhoneNumber {
	this := ThreeDSCardholderPhoneNumber{}
	return &this
}

// NewThreeDSCardholderPhoneNumberWithDefaults instantiates a new ThreeDSCardholderPhoneNumber object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSCardholderPhoneNumberWithDefaults() *ThreeDSCardholderPhoneNumber {
	this := ThreeDSCardholderPhoneNumber{}
	return &this
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSCardholderPhoneNumber) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode.Get()) {
		var ret string
		return ret
	}
	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSCardholderPhoneNumber) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// HasCountryCode returns a boolean if a field is not nil.
func (o *ThreeDSCardholderPhoneNumber) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given NullableString and assigns it to the CountryCode field.
func (o *ThreeDSCardholderPhoneNumber) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// SetCountryCodeNil sets the value for CountryCode to be an explicit nil
func (o *ThreeDSCardholderPhoneNumber) SetCountryCodeNil() {
	o.CountryCode.Set(nil)
}

// UnsetCountryCode ensures that no value is present for CountryCode, not even an explicit nil
func (o *ThreeDSCardholderPhoneNumber) UnsetCountryCode() {
	o.CountryCode.Unset()
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSCardholderPhoneNumber) GetNumber() string {
	if o == nil || IsNil(o.Number.Get()) {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSCardholderPhoneNumber) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field is not nil.
func (o *ThreeDSCardholderPhoneNumber) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *ThreeDSCardholderPhoneNumber) SetNumber(v string) {
	o.Number.Set(&v)
}

// SetNumberNil sets the value for Number to be an explicit nil
func (o *ThreeDSCardholderPhoneNumber) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *ThreeDSCardholderPhoneNumber) UnsetNumber() {
	o.Number.Unset()
}

func (o ThreeDSCardholderPhoneNumber) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSCardholderPhoneNumber) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CountryCode.IsSet() {
		toSerialize["country_code"] = o.CountryCode.Get()
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	return toSerialize, nil
}

type NullableThreeDSCardholderPhoneNumber struct {
	value *ThreeDSCardholderPhoneNumber
	isSet bool
}

func (v NullableThreeDSCardholderPhoneNumber) Get() *ThreeDSCardholderPhoneNumber {
	return v.value
}

func (v *NullableThreeDSCardholderPhoneNumber) Set(val *ThreeDSCardholderPhoneNumber) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSCardholderPhoneNumber) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSCardholderPhoneNumber) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSCardholderPhoneNumber(val *ThreeDSCardholderPhoneNumber) *NullableThreeDSCardholderPhoneNumber {
	return &NullableThreeDSCardholderPhoneNumber{value: val, isSet: true}
}

func (v NullableThreeDSCardholderPhoneNumber) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSCardholderPhoneNumber) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
