/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSPurchaseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSPurchaseInfo{}

// ThreeDSPurchaseInfo struct for ThreeDSPurchaseInfo
type ThreeDSPurchaseInfo struct {
	Amount              NullableString `json:"amount,omitempty"`
	Currency            NullableString `json:"currency,omitempty"`
	Exponent            NullableString `json:"exponent,omitempty"`
	Date                NullableString `json:"date,omitempty"`
	TransactionType     NullableString `json:"transaction_type,omitempty"`
	InstallmentCount    NullableString `json:"installment_count,omitempty"`
	RecurringExpiration NullableString `json:"recurring_expiration,omitempty"`
	RecurringFrequency  NullableString `json:"recurring_frequency,omitempty"`
}

// NewThreeDSPurchaseInfo instantiates a new ThreeDSPurchaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSPurchaseInfo() *ThreeDSPurchaseInfo {
	this := ThreeDSPurchaseInfo{}
	return &this
}

// NewThreeDSPurchaseInfoWithDefaults instantiates a new ThreeDSPurchaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSPurchaseInfoWithDefaults() *ThreeDSPurchaseInfo {
	this := ThreeDSPurchaseInfo{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetAmount() string {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret string
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableString and assigns it to the Amount field.
func (o *ThreeDSPurchaseInfo) SetAmount(v string) {
	o.Amount.Set(&v)
}

// SetAmountNil sets the value for Amount to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetAmount() {
	o.Amount.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetCurrency() string {
	if o == nil || IsNil(o.Currency.Get()) {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *ThreeDSPurchaseInfo) SetCurrency(v string) {
	o.Currency.Set(&v)
}

// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetCurrency() {
	o.Currency.Unset()
}

// GetExponent returns the Exponent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetExponent() string {
	if o == nil || IsNil(o.Exponent.Get()) {
		var ret string
		return ret
	}
	return *o.Exponent.Get()
}

// GetExponentOk returns a tuple with the Exponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetExponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exponent.Get(), o.Exponent.IsSet()
}

// HasExponent returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasExponent() bool {
	if o != nil && !IsNil(o.Exponent) {
		return true
	}

	return false
}

// SetExponent gets a reference to the given NullableString and assigns it to the Exponent field.
func (o *ThreeDSPurchaseInfo) SetExponent(v string) {
	o.Exponent.Set(&v)
}

// SetExponentNil sets the value for Exponent to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetExponentNil() {
	o.Exponent.Set(nil)
}

// UnsetExponent ensures that no value is present for Exponent, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetExponent() {
	o.Exponent.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *ThreeDSPurchaseInfo) SetDate(v string) {
	o.Date.Set(&v)
}

// SetDateNil sets the value for Date to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetDate() {
	o.Date.Unset()
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionType.Get()
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionType.Get(), o.TransactionType.IsSet()
}

// HasTransactionType returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given NullableString and assigns it to the TransactionType field.
func (o *ThreeDSPurchaseInfo) SetTransactionType(v string) {
	o.TransactionType.Set(&v)
}

// SetTransactionTypeNil sets the value for TransactionType to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetTransactionTypeNil() {
	o.TransactionType.Set(nil)
}

// UnsetTransactionType ensures that no value is present for TransactionType, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetTransactionType() {
	o.TransactionType.Unset()
}

// GetInstallmentCount returns the InstallmentCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetInstallmentCount() string {
	if o == nil || IsNil(o.InstallmentCount.Get()) {
		var ret string
		return ret
	}
	return *o.InstallmentCount.Get()
}

// GetInstallmentCountOk returns a tuple with the InstallmentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetInstallmentCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallmentCount.Get(), o.InstallmentCount.IsSet()
}

// HasInstallmentCount returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasInstallmentCount() bool {
	if o != nil && !IsNil(o.InstallmentCount) {
		return true
	}

	return false
}

// SetInstallmentCount gets a reference to the given NullableString and assigns it to the InstallmentCount field.
func (o *ThreeDSPurchaseInfo) SetInstallmentCount(v string) {
	o.InstallmentCount.Set(&v)
}

// SetInstallmentCountNil sets the value for InstallmentCount to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetInstallmentCountNil() {
	o.InstallmentCount.Set(nil)
}

// UnsetInstallmentCount ensures that no value is present for InstallmentCount, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetInstallmentCount() {
	o.InstallmentCount.Unset()
}

// GetRecurringExpiration returns the RecurringExpiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetRecurringExpiration() string {
	if o == nil || IsNil(o.RecurringExpiration.Get()) {
		var ret string
		return ret
	}
	return *o.RecurringExpiration.Get()
}

// GetRecurringExpirationOk returns a tuple with the RecurringExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetRecurringExpirationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringExpiration.Get(), o.RecurringExpiration.IsSet()
}

// HasRecurringExpiration returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasRecurringExpiration() bool {
	if o != nil && !IsNil(o.RecurringExpiration) {
		return true
	}

	return false
}

// SetRecurringExpiration gets a reference to the given NullableString and assigns it to the RecurringExpiration field.
func (o *ThreeDSPurchaseInfo) SetRecurringExpiration(v string) {
	o.RecurringExpiration.Set(&v)
}

// SetRecurringExpirationNil sets the value for RecurringExpiration to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetRecurringExpirationNil() {
	o.RecurringExpiration.Set(nil)
}

// UnsetRecurringExpiration ensures that no value is present for RecurringExpiration, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetRecurringExpiration() {
	o.RecurringExpiration.Unset()
}

// GetRecurringFrequency returns the RecurringFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSPurchaseInfo) GetRecurringFrequency() string {
	if o == nil || IsNil(o.RecurringFrequency.Get()) {
		var ret string
		return ret
	}
	return *o.RecurringFrequency.Get()
}

// GetRecurringFrequencyOk returns a tuple with the RecurringFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSPurchaseInfo) GetRecurringFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringFrequency.Get(), o.RecurringFrequency.IsSet()
}

// HasRecurringFrequency returns a boolean if a field is not nil.
func (o *ThreeDSPurchaseInfo) HasRecurringFrequency() bool {
	if o != nil && !IsNil(o.RecurringFrequency) {
		return true
	}

	return false
}

// SetRecurringFrequency gets a reference to the given NullableString and assigns it to the RecurringFrequency field.
func (o *ThreeDSPurchaseInfo) SetRecurringFrequency(v string) {
	o.RecurringFrequency.Set(&v)
}

// SetRecurringFrequencyNil sets the value for RecurringFrequency to be an explicit nil
func (o *ThreeDSPurchaseInfo) SetRecurringFrequencyNil() {
	o.RecurringFrequency.Set(nil)
}

// UnsetRecurringFrequency ensures that no value is present for RecurringFrequency, not even an explicit nil
func (o *ThreeDSPurchaseInfo) UnsetRecurringFrequency() {
	o.RecurringFrequency.Unset()
}

func (o ThreeDSPurchaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSPurchaseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Exponent.IsSet() {
		toSerialize["exponent"] = o.Exponent.Get()
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.TransactionType.IsSet() {
		toSerialize["transaction_type"] = o.TransactionType.Get()
	}
	if o.InstallmentCount.IsSet() {
		toSerialize["installment_count"] = o.InstallmentCount.Get()
	}
	if o.RecurringExpiration.IsSet() {
		toSerialize["recurring_expiration"] = o.RecurringExpiration.Get()
	}
	if o.RecurringFrequency.IsSet() {
		toSerialize["recurring_frequency"] = o.RecurringFrequency.Get()
	}
	return toSerialize, nil
}

type NullableThreeDSPurchaseInfo struct {
	value *ThreeDSPurchaseInfo
	isSet bool
}

func (v NullableThreeDSPurchaseInfo) Get() *ThreeDSPurchaseInfo {
	return v.value
}

func (v *NullableThreeDSPurchaseInfo) Set(val *ThreeDSPurchaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSPurchaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSPurchaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSPurchaseInfo(val *ThreeDSPurchaseInfo) *NullableThreeDSPurchaseInfo {
	return &NullableThreeDSPurchaseInfo{value: val, isSet: true}
}

func (v NullableThreeDSPurchaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSPurchaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
