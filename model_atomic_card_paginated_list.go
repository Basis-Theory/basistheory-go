/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// AtomicCardPaginatedList struct for AtomicCardPaginatedList
type AtomicCardPaginatedList struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Data []AtomicCard `json:"data,omitempty"`
}

// NewAtomicCardPaginatedList instantiates a new AtomicCardPaginatedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtomicCardPaginatedList() *AtomicCardPaginatedList {
	this := AtomicCardPaginatedList{}
	return &this
}

// NewAtomicCardPaginatedListWithDefaults instantiates a new AtomicCardPaginatedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtomicCardPaginatedListWithDefaults() *AtomicCardPaginatedList {
	this := AtomicCardPaginatedList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *AtomicCardPaginatedList) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtomicCardPaginatedList) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *AtomicCardPaginatedList) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *AtomicCardPaginatedList) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AtomicCardPaginatedList) GetData() []AtomicCard {
	if o == nil {
		var ret []AtomicCard
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AtomicCardPaginatedList) GetDataOk() ([]AtomicCard, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AtomicCardPaginatedList) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []AtomicCard and assigns it to the Data field.
func (o *AtomicCardPaginatedList) SetData(v []AtomicCard) {
	o.Data = v
}

func (o AtomicCardPaginatedList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableAtomicCardPaginatedList struct {
	value *AtomicCardPaginatedList
	isSet bool
}

func (v NullableAtomicCardPaginatedList) Get() *AtomicCardPaginatedList {
	return v.value
}

func (v *NullableAtomicCardPaginatedList) Set(val *AtomicCardPaginatedList) {
	v.value = val
	v.isSet = true
}

func (v NullableAtomicCardPaginatedList) IsSet() bool {
	return v.isSet
}

func (v *NullableAtomicCardPaginatedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtomicCardPaginatedList(val *AtomicCardPaginatedList) *NullableAtomicCardPaginatedList {
	return &NullableAtomicCardPaginatedList{value: val, isSet: true}
}

func (v NullableAtomicCardPaginatedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtomicCardPaginatedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


