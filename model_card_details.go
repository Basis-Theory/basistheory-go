/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the CardDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardDetails{}

// CardDetails struct for CardDetails
type CardDetails struct {
	Bin   NullableString `json:"bin,omitempty"`
	Last4 NullableString `json:"last4,omitempty"`
}

// NewCardDetails instantiates a new CardDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardDetails() *CardDetails {
	this := CardDetails{}
	return &this
}

// NewCardDetailsWithDefaults instantiates a new CardDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardDetailsWithDefaults() *CardDetails {
	this := CardDetails{}
	return &this
}

// GetBin returns the Bin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardDetails) GetBin() string {
	if o == nil || IsNil(o.Bin.Get()) {
		var ret string
		return ret
	}
	return *o.Bin.Get()
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardDetails) GetBinOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bin.Get(), o.Bin.IsSet()
}

// HasBin returns a boolean if a field is not nil.
func (o *CardDetails) HasBin() bool {
	if o != nil && !IsNil(o.Bin) {
		return true
	}

	return false
}

// SetBin gets a reference to the given NullableString and assigns it to the Bin field.
func (o *CardDetails) SetBin(v string) {
	o.Bin.Set(&v)
}

// SetBinNil sets the value for Bin to be an explicit nil
func (o *CardDetails) SetBinNil() {
	o.Bin.Set(nil)
}

// UnsetBin ensures that no value is present for Bin, not even an explicit nil
func (o *CardDetails) UnsetBin() {
	o.Bin.Unset()
}

// GetLast4 returns the Last4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CardDetails) GetLast4() string {
	if o == nil || IsNil(o.Last4.Get()) {
		var ret string
		return ret
	}
	return *o.Last4.Get()
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CardDetails) GetLast4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Last4.Get(), o.Last4.IsSet()
}

// HasLast4 returns a boolean if a field is not nil.
func (o *CardDetails) HasLast4() bool {
	if o != nil && !IsNil(o.Last4) {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given NullableString and assigns it to the Last4 field.
func (o *CardDetails) SetLast4(v string) {
	o.Last4.Set(&v)
}

// SetLast4Nil sets the value for Last4 to be an explicit nil
func (o *CardDetails) SetLast4Nil() {
	o.Last4.Set(nil)
}

// UnsetLast4 ensures that no value is present for Last4, not even an explicit nil
func (o *CardDetails) UnsetLast4() {
	o.Last4.Unset()
}

func (o CardDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Bin.IsSet() {
		toSerialize["bin"] = o.Bin.Get()
	}
	if o.Last4.IsSet() {
		toSerialize["last4"] = o.Last4.Get()
	}
	return toSerialize, nil
}

type NullableCardDetails struct {
	value *CardDetails
	isSet bool
}

func (v NullableCardDetails) Get() *CardDetails {
	return v.value
}

func (v *NullableCardDetails) Set(val *CardDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCardDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCardDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardDetails(val *CardDetails) *NullableCardDetails {
	return &NullableCardDetails{value: val, isSet: true}
}

func (v NullableCardDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
