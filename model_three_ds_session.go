/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
	"time"
)

// checks if the ThreeDSSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSSession{}

// ThreeDSSession struct for ThreeDSSession
type ThreeDSSession struct {
	Id             *string                `json:"id,omitempty"`
	Type           NullableString         `json:"type,omitempty"`
	TenantId       *string                `json:"tenant_id,omitempty"`
	PanTokenId     NullableString         `json:"pan_token_id,omitempty"`
	CardBrand      NullableString         `json:"card_brand,omitempty"`
	ExpirationDate *time.Time             `json:"expiration_date,omitempty"`
	CreatedDate    NullableTime           `json:"created_date,omitempty"`
	CreatedBy      NullableString         `json:"created_by,omitempty"`
	ModifiedDate   NullableTime           `json:"modified_date,omitempty"`
	ModifiedBy     NullableString         `json:"modified_by,omitempty"`
	Device         NullableString         `json:"device,omitempty"`
	DeviceInfo     *ThreeDSDeviceInfo     `json:"device_info,omitempty"`
	Version        *ThreeDSVersion        `json:"version,omitempty"`
	Method         *ThreeDSMethod         `json:"method,omitempty"`
	Authentication *ThreeDSAuthentication `json:"authentication,omitempty"`
}

// NewThreeDSSession instantiates a new ThreeDSSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSSession() *ThreeDSSession {
	this := ThreeDSSession{}
	return &this
}

// NewThreeDSSessionWithDefaults instantiates a new ThreeDSSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSSessionWithDefaults() *ThreeDSSession {
	this := ThreeDSSession{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ThreeDSSession) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ThreeDSSession) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ThreeDSSession) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *ThreeDSSession) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ThreeDSSession) UnsetType() {
	o.Type.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ThreeDSSession) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ThreeDSSession) SetTenantId(v string) {
	o.TenantId = &v
}

// GetPanTokenId returns the PanTokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetPanTokenId() string {
	if o == nil || IsNil(o.PanTokenId.Get()) {
		var ret string
		return ret
	}
	return *o.PanTokenId.Get()
}

// GetPanTokenIdOk returns a tuple with the PanTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetPanTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PanTokenId.Get(), o.PanTokenId.IsSet()
}

// HasPanTokenId returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasPanTokenId() bool {
	if o != nil && !IsNil(o.PanTokenId) {
		return true
	}

	return false
}

// SetPanTokenId gets a reference to the given NullableString and assigns it to the PanTokenId field.
func (o *ThreeDSSession) SetPanTokenId(v string) {
	o.PanTokenId.Set(&v)
}

// SetPanTokenIdNil sets the value for PanTokenId to be an explicit nil
func (o *ThreeDSSession) SetPanTokenIdNil() {
	o.PanTokenId.Set(nil)
}

// UnsetPanTokenId ensures that no value is present for PanTokenId, not even an explicit nil
func (o *ThreeDSSession) UnsetPanTokenId() {
	o.PanTokenId.Unset()
}

// GetCardBrand returns the CardBrand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetCardBrand() string {
	if o == nil || IsNil(o.CardBrand.Get()) {
		var ret string
		return ret
	}
	return *o.CardBrand.Get()
}

// GetCardBrandOk returns a tuple with the CardBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetCardBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardBrand.Get(), o.CardBrand.IsSet()
}

// HasCardBrand returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasCardBrand() bool {
	if o != nil && !IsNil(o.CardBrand) {
		return true
	}

	return false
}

// SetCardBrand gets a reference to the given NullableString and assigns it to the CardBrand field.
func (o *ThreeDSSession) SetCardBrand(v string) {
	o.CardBrand.Set(&v)
}

// SetCardBrandNil sets the value for CardBrand to be an explicit nil
func (o *ThreeDSSession) SetCardBrandNil() {
	o.CardBrand.Set(nil)
}

// UnsetCardBrand ensures that no value is present for CardBrand, not even an explicit nil
func (o *ThreeDSSession) UnsetCardBrand() {
	o.CardBrand.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ThreeDSSession) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *ThreeDSSession) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate.Get()
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedDate.Get(), o.CreatedDate.IsSet()
}

// HasCreatedDate returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given NullableTime and assigns it to the CreatedDate field.
func (o *ThreeDSSession) SetCreatedDate(v time.Time) {
	o.CreatedDate.Set(&v)
}

// SetCreatedDateNil sets the value for CreatedDate to be an explicit nil
func (o *ThreeDSSession) SetCreatedDateNil() {
	o.CreatedDate.Set(nil)
}

// UnsetCreatedDate ensures that no value is present for CreatedDate, not even an explicit nil
func (o *ThreeDSSession) UnsetCreatedDate() {
	o.CreatedDate.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *ThreeDSSession) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}

// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *ThreeDSSession) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *ThreeDSSession) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetModifiedDate returns the ModifiedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetModifiedDate() time.Time {
	if o == nil || IsNil(o.ModifiedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDate.Get()
}

// GetModifiedDateOk returns a tuple with the ModifiedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetModifiedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedDate.Get(), o.ModifiedDate.IsSet()
}

// HasModifiedDate returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasModifiedDate() bool {
	if o != nil && !IsNil(o.ModifiedDate) {
		return true
	}

	return false
}

// SetModifiedDate gets a reference to the given NullableTime and assigns it to the ModifiedDate field.
func (o *ThreeDSSession) SetModifiedDate(v time.Time) {
	o.ModifiedDate.Set(&v)
}

// SetModifiedDateNil sets the value for ModifiedDate to be an explicit nil
func (o *ThreeDSSession) SetModifiedDateNil() {
	o.ModifiedDate.Set(nil)
}

// UnsetModifiedDate ensures that no value is present for ModifiedDate, not even an explicit nil
func (o *ThreeDSSession) UnsetModifiedDate() {
	o.ModifiedDate.Unset()
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedBy.Get()
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedBy.Get(), o.ModifiedBy.IsSet()
}

// HasModifiedBy returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasModifiedBy() bool {
	if o != nil && !IsNil(o.ModifiedBy) {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given NullableString and assigns it to the ModifiedBy field.
func (o *ThreeDSSession) SetModifiedBy(v string) {
	o.ModifiedBy.Set(&v)
}

// SetModifiedByNil sets the value for ModifiedBy to be an explicit nil
func (o *ThreeDSSession) SetModifiedByNil() {
	o.ModifiedBy.Set(nil)
}

// UnsetModifiedBy ensures that no value is present for ModifiedBy, not even an explicit nil
func (o *ThreeDSSession) UnsetModifiedBy() {
	o.ModifiedBy.Unset()
}

// GetDevice returns the Device field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSSession) GetDevice() string {
	if o == nil || IsNil(o.Device.Get()) {
		var ret string
		return ret
	}
	return *o.Device.Get()
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSSession) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Device.Get(), o.Device.IsSet()
}

// HasDevice returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given NullableString and assigns it to the Device field.
func (o *ThreeDSSession) SetDevice(v string) {
	o.Device.Set(&v)
}

// SetDeviceNil sets the value for Device to be an explicit nil
func (o *ThreeDSSession) SetDeviceNil() {
	o.Device.Set(nil)
}

// UnsetDevice ensures that no value is present for Device, not even an explicit nil
func (o *ThreeDSSession) UnsetDevice() {
	o.Device.Unset()
}

// GetDeviceInfo returns the DeviceInfo field value if set, zero value otherwise.
func (o *ThreeDSSession) GetDeviceInfo() ThreeDSDeviceInfo {
	if o == nil || IsNil(o.DeviceInfo) {
		var ret ThreeDSDeviceInfo
		return ret
	}
	return *o.DeviceInfo
}

// GetDeviceInfoOk returns a tuple with the DeviceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetDeviceInfoOk() (*ThreeDSDeviceInfo, bool) {
	if o == nil || IsNil(o.DeviceInfo) {
		return nil, false
	}
	return o.DeviceInfo, true
}

// HasDeviceInfo returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasDeviceInfo() bool {
	if o != nil && !IsNil(o.DeviceInfo) {
		return true
	}

	return false
}

// SetDeviceInfo gets a reference to the given ThreeDSDeviceInfo and assigns it to the DeviceInfo field.
func (o *ThreeDSSession) SetDeviceInfo(v ThreeDSDeviceInfo) {
	o.DeviceInfo = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ThreeDSSession) GetVersion() ThreeDSVersion {
	if o == nil || IsNil(o.Version) {
		var ret ThreeDSVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetVersionOk() (*ThreeDSVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given ThreeDSVersion and assigns it to the Version field.
func (o *ThreeDSSession) SetVersion(v ThreeDSVersion) {
	o.Version = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ThreeDSSession) GetMethod() ThreeDSMethod {
	if o == nil || IsNil(o.Method) {
		var ret ThreeDSMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetMethodOk() (*ThreeDSMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given ThreeDSMethod and assigns it to the Method field.
func (o *ThreeDSSession) SetMethod(v ThreeDSMethod) {
	o.Method = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *ThreeDSSession) GetAuthentication() ThreeDSAuthentication {
	if o == nil || IsNil(o.Authentication) {
		var ret ThreeDSAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSSession) GetAuthenticationOk() (*ThreeDSAuthentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field is not nil.
func (o *ThreeDSSession) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given ThreeDSAuthentication and assigns it to the Authentication field.
func (o *ThreeDSSession) SetAuthentication(v ThreeDSAuthentication) {
	o.Authentication = &v
}

func (o ThreeDSSession) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenant_id"] = o.TenantId
	}
	if o.PanTokenId.IsSet() {
		toSerialize["pan_token_id"] = o.PanTokenId.Get()
	}
	if o.CardBrand.IsSet() {
		toSerialize["card_brand"] = o.CardBrand.Get()
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.CreatedDate.IsSet() {
		toSerialize["created_date"] = o.CreatedDate.Get()
	}
	if o.CreatedBy.IsSet() {
		toSerialize["created_by"] = o.CreatedBy.Get()
	}
	if o.ModifiedDate.IsSet() {
		toSerialize["modified_date"] = o.ModifiedDate.Get()
	}
	if o.ModifiedBy.IsSet() {
		toSerialize["modified_by"] = o.ModifiedBy.Get()
	}
	if o.Device.IsSet() {
		toSerialize["device"] = o.Device.Get()
	}
	if !IsNil(o.DeviceInfo) {
		toSerialize["device_info"] = o.DeviceInfo
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	return toSerialize, nil
}

type NullableThreeDSSession struct {
	value *ThreeDSSession
	isSet bool
}

func (v NullableThreeDSSession) Get() *ThreeDSSession {
	return v.value
}

func (v *NullableThreeDSSession) Set(val *ThreeDSSession) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSSession) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSSession(val *ThreeDSSession) *NullableThreeDSSession {
	return &NullableThreeDSSession{value: val, isSet: true}
}

func (v NullableThreeDSSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
