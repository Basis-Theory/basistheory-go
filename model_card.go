/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// Card struct for Card
type Card struct {
	Number NullableString `json:"number,omitempty"`
	ExpirationMonth NullableInt32 `json:"expiration_month,omitempty"`
	ExpirationYear NullableInt32 `json:"expiration_year,omitempty"`
	Cvc NullableString `json:"cvc,omitempty"`
}

// NewCard instantiates a new Card object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCard() *Card {
	this := Card{}
	return &this
}

// NewCardWithDefaults instantiates a new Card object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardWithDefaults() *Card {
	this := Card{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Card) GetNumber() string {
	if o == nil || o.Number.Get() == nil {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Card) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *Card) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *Card) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *Card) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *Card) UnsetNumber() {
	o.Number.Unset()
}

// GetExpirationMonth returns the ExpirationMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Card) GetExpirationMonth() int32 {
	if o == nil || o.ExpirationMonth.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpirationMonth.Get()
}

// GetExpirationMonthOk returns a tuple with the ExpirationMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Card) GetExpirationMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationMonth.Get(), o.ExpirationMonth.IsSet()
}

// HasExpirationMonth returns a boolean if a field has been set.
func (o *Card) HasExpirationMonth() bool {
	if o != nil && o.ExpirationMonth.IsSet() {
		return true
	}

	return false
}

// SetExpirationMonth gets a reference to the given NullableInt32 and assigns it to the ExpirationMonth field.
func (o *Card) SetExpirationMonth(v int32) {
	o.ExpirationMonth.Set(&v)
}
// SetExpirationMonthNil sets the value for ExpirationMonth to be an explicit nil
func (o *Card) SetExpirationMonthNil() {
	o.ExpirationMonth.Set(nil)
}

// UnsetExpirationMonth ensures that no value is present for ExpirationMonth, not even an explicit nil
func (o *Card) UnsetExpirationMonth() {
	o.ExpirationMonth.Unset()
}

// GetExpirationYear returns the ExpirationYear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Card) GetExpirationYear() int32 {
	if o == nil || o.ExpirationYear.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpirationYear.Get()
}

// GetExpirationYearOk returns a tuple with the ExpirationYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Card) GetExpirationYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationYear.Get(), o.ExpirationYear.IsSet()
}

// HasExpirationYear returns a boolean if a field has been set.
func (o *Card) HasExpirationYear() bool {
	if o != nil && o.ExpirationYear.IsSet() {
		return true
	}

	return false
}

// SetExpirationYear gets a reference to the given NullableInt32 and assigns it to the ExpirationYear field.
func (o *Card) SetExpirationYear(v int32) {
	o.ExpirationYear.Set(&v)
}
// SetExpirationYearNil sets the value for ExpirationYear to be an explicit nil
func (o *Card) SetExpirationYearNil() {
	o.ExpirationYear.Set(nil)
}

// UnsetExpirationYear ensures that no value is present for ExpirationYear, not even an explicit nil
func (o *Card) UnsetExpirationYear() {
	o.ExpirationYear.Unset()
}

// GetCvc returns the Cvc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Card) GetCvc() string {
	if o == nil || o.Cvc.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cvc.Get()
}

// GetCvcOk returns a tuple with the Cvc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Card) GetCvcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cvc.Get(), o.Cvc.IsSet()
}

// HasCvc returns a boolean if a field has been set.
func (o *Card) HasCvc() bool {
	if o != nil && o.Cvc.IsSet() {
		return true
	}

	return false
}

// SetCvc gets a reference to the given NullableString and assigns it to the Cvc field.
func (o *Card) SetCvc(v string) {
	o.Cvc.Set(&v)
}
// SetCvcNil sets the value for Cvc to be an explicit nil
func (o *Card) SetCvcNil() {
	o.Cvc.Set(nil)
}

// UnsetCvc ensures that no value is present for Cvc, not even an explicit nil
func (o *Card) UnsetCvc() {
	o.Cvc.Unset()
}

func (o Card) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.ExpirationMonth.IsSet() {
		toSerialize["expiration_month"] = o.ExpirationMonth.Get()
	}
	if o.ExpirationYear.IsSet() {
		toSerialize["expiration_year"] = o.ExpirationYear.Get()
	}
	if o.Cvc.IsSet() {
		toSerialize["cvc"] = o.Cvc.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCard struct {
	value *Card
	isSet bool
}

func (v NullableCard) Get() *Card {
	return v.value
}

func (v *NullableCard) Set(val *Card) {
	v.value = val
	v.isSet = true
}

func (v NullableCard) IsSet() bool {
	return v.isSet
}

func (v *NullableCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCard(val *Card) *NullableCard {
	return &NullableCard{value: val, isSet: true}
}

func (v NullableCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


