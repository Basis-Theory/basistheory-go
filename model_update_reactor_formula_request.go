/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// UpdateReactorFormulaRequest struct for UpdateReactorFormulaRequest
type UpdateReactorFormulaRequest struct {
	Type string `json:"type"`
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Code NullableString `json:"code,omitempty"`
	Configuration []ReactorFormulaConfiguration `json:"configuration,omitempty"`
	RequestParameters []ReactorFormulaRequestParameter `json:"request_parameters,omitempty"`
}

// NewUpdateReactorFormulaRequest instantiates a new UpdateReactorFormulaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateReactorFormulaRequest(type_ string, name string) *UpdateReactorFormulaRequest {
	this := UpdateReactorFormulaRequest{}
	this.Type = type_
	this.Name = name
	return &this
}

// NewUpdateReactorFormulaRequestWithDefaults instantiates a new UpdateReactorFormulaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateReactorFormulaRequestWithDefaults() *UpdateReactorFormulaRequest {
	this := UpdateReactorFormulaRequest{}
	return &this
}

// GetType returns the Type field value
func (o *UpdateReactorFormulaRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateReactorFormulaRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateReactorFormulaRequest) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *UpdateReactorFormulaRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateReactorFormulaRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateReactorFormulaRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaRequest) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateReactorFormulaRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateReactorFormulaRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateReactorFormulaRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateReactorFormulaRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaRequest) GetIcon() string {
	if o == nil || o.Icon.Get() == nil {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaRequest) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *UpdateReactorFormulaRequest) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *UpdateReactorFormulaRequest) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *UpdateReactorFormulaRequest) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *UpdateReactorFormulaRequest) UnsetIcon() {
	o.Icon.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaRequest) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateReactorFormulaRequest) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *UpdateReactorFormulaRequest) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *UpdateReactorFormulaRequest) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *UpdateReactorFormulaRequest) UnsetCode() {
	o.Code.Unset()
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaRequest) GetConfiguration() []ReactorFormulaConfiguration {
	if o == nil {
		var ret []ReactorFormulaConfiguration
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaRequest) GetConfigurationOk() ([]ReactorFormulaConfiguration, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *UpdateReactorFormulaRequest) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []ReactorFormulaConfiguration and assigns it to the Configuration field.
func (o *UpdateReactorFormulaRequest) SetConfiguration(v []ReactorFormulaConfiguration) {
	o.Configuration = v
}

// GetRequestParameters returns the RequestParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaRequest) GetRequestParameters() []ReactorFormulaRequestParameter {
	if o == nil {
		var ret []ReactorFormulaRequestParameter
		return ret
	}
	return o.RequestParameters
}

// GetRequestParametersOk returns a tuple with the RequestParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaRequest) GetRequestParametersOk() ([]ReactorFormulaRequestParameter, bool) {
	if o == nil || o.RequestParameters == nil {
		return nil, false
	}
	return o.RequestParameters, true
}

// HasRequestParameters returns a boolean if a field has been set.
func (o *UpdateReactorFormulaRequest) HasRequestParameters() bool {
	if o != nil && o.RequestParameters != nil {
		return true
	}

	return false
}

// SetRequestParameters gets a reference to the given []ReactorFormulaRequestParameter and assigns it to the RequestParameters field.
func (o *UpdateReactorFormulaRequest) SetRequestParameters(v []ReactorFormulaRequestParameter) {
	o.RequestParameters = v
}

func (o UpdateReactorFormulaRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.RequestParameters != nil {
		toSerialize["request_parameters"] = o.RequestParameters
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateReactorFormulaRequest struct {
	value *UpdateReactorFormulaRequest
	isSet bool
}

func (v NullableUpdateReactorFormulaRequest) Get() *UpdateReactorFormulaRequest {
	return v.value
}

func (v *NullableUpdateReactorFormulaRequest) Set(val *UpdateReactorFormulaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateReactorFormulaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateReactorFormulaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateReactorFormulaRequest(val *UpdateReactorFormulaRequest) *NullableUpdateReactorFormulaRequest {
	return &NullableUpdateReactorFormulaRequest{value: val, isSet: true}
}

func (v NullableUpdateReactorFormulaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateReactorFormulaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


