/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// AtomicReactRequest struct for AtomicReactRequest
type AtomicReactRequest struct {
	ReactorId         string                 `json:"reactor_id"`
	RequestParameters map[string]interface{} `json:"request_parameters,omitempty"`
}

// NewAtomicReactRequest instantiates a new AtomicReactRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtomicReactRequest(reactorId string) *AtomicReactRequest {
	this := AtomicReactRequest{}
	this.ReactorId = reactorId
	return &this
}

// NewAtomicReactRequestWithDefaults instantiates a new AtomicReactRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtomicReactRequestWithDefaults() *AtomicReactRequest {
	this := AtomicReactRequest{}
	return &this
}

// GetReactorId returns the ReactorId field value
func (o *AtomicReactRequest) GetReactorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReactorId
}

// GetReactorIdOk returns a tuple with the ReactorId field value
// and a boolean to check if the value has been set.
func (o *AtomicReactRequest) GetReactorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReactorId, true
}

// SetReactorId sets field value
func (o *AtomicReactRequest) SetReactorId(v string) {
	o.ReactorId = v
}

// GetRequestParameters returns the RequestParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AtomicReactRequest) GetRequestParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestParameters
}

// GetRequestParametersOk returns a tuple with the RequestParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AtomicReactRequest) GetRequestParametersOk() (map[string]interface{}, bool) {
	if o == nil || o.RequestParameters == nil {
		return nil, false
	}
	return o.RequestParameters, true
}

// HasRequestParameters returns a boolean if a field has been set.
func (o *AtomicReactRequest) HasRequestParameters() bool {
	if o != nil && o.RequestParameters != nil {
		return true
	}

	return false
}

// SetRequestParameters gets a reference to the given map[string]interface{} and assigns it to the RequestParameters field.
func (o *AtomicReactRequest) SetRequestParameters(v map[string]interface{}) {
	o.RequestParameters = v
}

func (o AtomicReactRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reactor_id"] = o.ReactorId
	}
	if o.RequestParameters != nil {
		toSerialize["request_parameters"] = o.RequestParameters
	}
	return json.Marshal(toSerialize)
}

type NullableAtomicReactRequest struct {
	value *AtomicReactRequest
	isSet bool
}

func (v NullableAtomicReactRequest) Get() *AtomicReactRequest {
	return v.value
}

func (v *NullableAtomicReactRequest) Set(val *AtomicReactRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAtomicReactRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAtomicReactRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtomicReactRequest(val *AtomicReactRequest) *NullableAtomicReactRequest {
	return &NullableAtomicReactRequest{value: val, isSet: true}
}

func (v NullableAtomicReactRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtomicReactRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
