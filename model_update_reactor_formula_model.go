/*
BasisTheory Vault API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// UpdateReactorFormulaModel struct for UpdateReactorFormulaModel
type UpdateReactorFormulaModel struct {
	Type NullableString `json:"type,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Code NullableString `json:"code,omitempty"`
	Configuration []ReactorFormulaConfigurationModel `json:"configuration,omitempty"`
	RequestParameters []ReactorFormulaRequestParameterModel `json:"request_parameters,omitempty"`
}

// NewUpdateReactorFormulaModel instantiates a new UpdateReactorFormulaModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateReactorFormulaModel() *UpdateReactorFormulaModel {
	this := UpdateReactorFormulaModel{}
	return &this
}

// NewUpdateReactorFormulaModelWithDefaults instantiates a new UpdateReactorFormulaModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateReactorFormulaModelWithDefaults() *UpdateReactorFormulaModel {
	this := UpdateReactorFormulaModel{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *UpdateReactorFormulaModel) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *UpdateReactorFormulaModel) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *UpdateReactorFormulaModel) UnsetType() {
	o.Type.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateReactorFormulaModel) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateReactorFormulaModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateReactorFormulaModel) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateReactorFormulaModel) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateReactorFormulaModel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateReactorFormulaModel) UnsetDescription() {
	o.Description.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetIcon() string {
	if o == nil || o.Icon.Get() == nil {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *UpdateReactorFormulaModel) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *UpdateReactorFormulaModel) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *UpdateReactorFormulaModel) UnsetIcon() {
	o.Icon.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *UpdateReactorFormulaModel) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *UpdateReactorFormulaModel) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *UpdateReactorFormulaModel) UnsetCode() {
	o.Code.Unset()
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetConfiguration() []ReactorFormulaConfigurationModel {
	if o == nil {
		var ret []ReactorFormulaConfigurationModel
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetConfigurationOk() ([]ReactorFormulaConfigurationModel, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given []ReactorFormulaConfigurationModel and assigns it to the Configuration field.
func (o *UpdateReactorFormulaModel) SetConfiguration(v []ReactorFormulaConfigurationModel) {
	o.Configuration = v
}

// GetRequestParameters returns the RequestParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateReactorFormulaModel) GetRequestParameters() []ReactorFormulaRequestParameterModel {
	if o == nil {
		var ret []ReactorFormulaRequestParameterModel
		return ret
	}
	return o.RequestParameters
}

// GetRequestParametersOk returns a tuple with the RequestParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateReactorFormulaModel) GetRequestParametersOk() ([]ReactorFormulaRequestParameterModel, bool) {
	if o == nil || o.RequestParameters == nil {
		return nil, false
	}
	return o.RequestParameters, true
}

// HasRequestParameters returns a boolean if a field has been set.
func (o *UpdateReactorFormulaModel) HasRequestParameters() bool {
	if o != nil && o.RequestParameters != nil {
		return true
	}

	return false
}

// SetRequestParameters gets a reference to the given []ReactorFormulaRequestParameterModel and assigns it to the RequestParameters field.
func (o *UpdateReactorFormulaModel) SetRequestParameters(v []ReactorFormulaRequestParameterModel) {
	o.RequestParameters = v
}

func (o UpdateReactorFormulaModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	if o.RequestParameters != nil {
		toSerialize["request_parameters"] = o.RequestParameters
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateReactorFormulaModel struct {
	value *UpdateReactorFormulaModel
	isSet bool
}

func (v NullableUpdateReactorFormulaModel) Get() *UpdateReactorFormulaModel {
	return v.value
}

func (v *NullableUpdateReactorFormulaModel) Set(val *UpdateReactorFormulaModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateReactorFormulaModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateReactorFormulaModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateReactorFormulaModel(val *UpdateReactorFormulaModel) *NullableUpdateReactorFormulaModel {
	return &NullableUpdateReactorFormulaModel{value: val, isSet: true}
}

func (v NullableUpdateReactorFormulaModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateReactorFormulaModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


