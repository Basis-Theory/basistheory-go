/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
	"time"
)

// checks if the CreateSessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSessionResponse{}

// CreateSessionResponse struct for CreateSessionResponse
type CreateSessionResponse struct {
	SessionKey NullableString `json:"session_key,omitempty"`
	Nonce      NullableString `json:"nonce,omitempty"`
	ExpiresAt  NullableTime   `json:"expires_at,omitempty"`
}

// NewCreateSessionResponse instantiates a new CreateSessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSessionResponse() *CreateSessionResponse {
	this := CreateSessionResponse{}
	return &this
}

// NewCreateSessionResponseWithDefaults instantiates a new CreateSessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSessionResponseWithDefaults() *CreateSessionResponse {
	this := CreateSessionResponse{}
	return &this
}

// GetSessionKey returns the SessionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSessionResponse) GetSessionKey() string {
	if o == nil || IsNil(o.SessionKey.Get()) {
		var ret string
		return ret
	}
	return *o.SessionKey.Get()
}

// GetSessionKeyOk returns a tuple with the SessionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSessionResponse) GetSessionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionKey.Get(), o.SessionKey.IsSet()
}

// HasSessionKey returns a boolean if a field is not nil.
func (o *CreateSessionResponse) HasSessionKey() bool {
	if o != nil && !IsNil(o.SessionKey) {
		return true
	}

	return false
}

// SetSessionKey gets a reference to the given NullableString and assigns it to the SessionKey field.
func (o *CreateSessionResponse) SetSessionKey(v string) {
	o.SessionKey.Set(&v)
}

// SetSessionKeyNil sets the value for SessionKey to be an explicit nil
func (o *CreateSessionResponse) SetSessionKeyNil() {
	o.SessionKey.Set(nil)
}

// UnsetSessionKey ensures that no value is present for SessionKey, not even an explicit nil
func (o *CreateSessionResponse) UnsetSessionKey() {
	o.SessionKey.Unset()
}

// GetNonce returns the Nonce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSessionResponse) GetNonce() string {
	if o == nil || IsNil(o.Nonce.Get()) {
		var ret string
		return ret
	}
	return *o.Nonce.Get()
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSessionResponse) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nonce.Get(), o.Nonce.IsSet()
}

// HasNonce returns a boolean if a field is not nil.
func (o *CreateSessionResponse) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given NullableString and assigns it to the Nonce field.
func (o *CreateSessionResponse) SetNonce(v string) {
	o.Nonce.Set(&v)
}

// SetNonceNil sets the value for Nonce to be an explicit nil
func (o *CreateSessionResponse) SetNonceNil() {
	o.Nonce.Set(nil)
}

// UnsetNonce ensures that no value is present for Nonce, not even an explicit nil
func (o *CreateSessionResponse) UnsetNonce() {
	o.Nonce.Unset()
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateSessionResponse) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateSessionResponse) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field is not nil.
func (o *CreateSessionResponse) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableTime and assigns it to the ExpiresAt field.
func (o *CreateSessionResponse) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}

// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *CreateSessionResponse) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *CreateSessionResponse) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

func (o CreateSessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SessionKey.IsSet() {
		toSerialize["session_key"] = o.SessionKey.Get()
	}
	if o.Nonce.IsSet() {
		toSerialize["nonce"] = o.Nonce.Get()
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	return toSerialize, nil
}

type NullableCreateSessionResponse struct {
	value *CreateSessionResponse
	isSet bool
}

func (v NullableCreateSessionResponse) Get() *CreateSessionResponse {
	return v.value
}

func (v *NullableCreateSessionResponse) Set(val *CreateSessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSessionResponse(val *CreateSessionResponse) *NullableCreateSessionResponse {
	return &NullableCreateSessionResponse{value: val, isSet: true}
}

func (v NullableCreateSessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
