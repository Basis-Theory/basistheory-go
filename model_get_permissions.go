/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// GetPermissions struct for GetPermissions
type GetPermissions struct {
	ApplicationType NullableString `json:"applicationType,omitempty"`
}

// NewGetPermissions instantiates a new GetPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPermissions() *GetPermissions {
	this := GetPermissions{}
	return &this
}

// NewGetPermissionsWithDefaults instantiates a new GetPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPermissionsWithDefaults() *GetPermissions {
	this := GetPermissions{}
	return &this
}

// GetApplicationType returns the ApplicationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetPermissions) GetApplicationType() string {
	if o == nil || o.ApplicationType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApplicationType.Get()
}

// GetApplicationTypeOk returns a tuple with the ApplicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetPermissions) GetApplicationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplicationType.Get(), o.ApplicationType.IsSet()
}

// HasApplicationType returns a boolean if a field has been set.
func (o *GetPermissions) HasApplicationType() bool {
	if o != nil && o.ApplicationType.IsSet() {
		return true
	}

	return false
}

// SetApplicationType gets a reference to the given NullableString and assigns it to the ApplicationType field.
func (o *GetPermissions) SetApplicationType(v string) {
	o.ApplicationType.Set(&v)
}

// SetApplicationTypeNil sets the value for ApplicationType to be an explicit nil
func (o *GetPermissions) SetApplicationTypeNil() {
	o.ApplicationType.Set(nil)
}

// UnsetApplicationType ensures that no value is present for ApplicationType, not even an explicit nil
func (o *GetPermissions) UnsetApplicationType() {
	o.ApplicationType.Unset()
}

func (o GetPermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationType.IsSet() {
		toSerialize["applicationType"] = o.ApplicationType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGetPermissions struct {
	value *GetPermissions
	isSet bool
}

func (v NullableGetPermissions) Get() *GetPermissions {
	return v.value
}

func (v *NullableGetPermissions) Set(val *GetPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPermissions(val *GetPermissions) *NullableGetPermissions {
	return &NullableGetPermissions{value: val, isSet: true}
}

func (v NullableGetPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
