/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// ReactorFormulaConfiguration struct for ReactorFormulaConfiguration
type ReactorFormulaConfiguration struct {
	Name        string         `json:"name"`
	Description NullableString `json:"description,omitempty"`
	Type        string         `json:"type"`
}

// NewReactorFormulaConfiguration instantiates a new ReactorFormulaConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactorFormulaConfiguration(name string, type_ string) *ReactorFormulaConfiguration {
	this := ReactorFormulaConfiguration{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewReactorFormulaConfigurationWithDefaults instantiates a new ReactorFormulaConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactorFormulaConfigurationWithDefaults() *ReactorFormulaConfiguration {
	this := ReactorFormulaConfiguration{}
	return &this
}

// GetName returns the Name field value
func (o *ReactorFormulaConfiguration) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReactorFormulaConfiguration) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReactorFormulaConfiguration) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReactorFormulaConfiguration) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReactorFormulaConfiguration) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ReactorFormulaConfiguration) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ReactorFormulaConfiguration) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ReactorFormulaConfiguration) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ReactorFormulaConfiguration) UnsetDescription() {
	o.Description.Unset()
}

// GetType returns the Type field value
func (o *ReactorFormulaConfiguration) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ReactorFormulaConfiguration) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ReactorFormulaConfiguration) SetType(v string) {
	o.Type = v
}

func (o ReactorFormulaConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableReactorFormulaConfiguration struct {
	value *ReactorFormulaConfiguration
	isSet bool
}

func (v NullableReactorFormulaConfiguration) Get() *ReactorFormulaConfiguration {
	return v.value
}

func (v *NullableReactorFormulaConfiguration) Set(val *ReactorFormulaConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableReactorFormulaConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableReactorFormulaConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactorFormulaConfiguration(val *ReactorFormulaConfiguration) *NullableReactorFormulaConfiguration {
	return &NullableReactorFormulaConfiguration{value: val, isSet: true}
}

func (v NullableReactorFormulaConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactorFormulaConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
