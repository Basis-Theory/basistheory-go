/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// GetTokens struct for GetTokens
type GetTokens struct {
	Types          []string          `json:"types,omitempty"`
	TokenIds       []string          `json:"tokenIds,omitempty"`
	MetadataSearch map[string]string `json:"metadataSearch,omitempty"`
	Page           NullableInt32     `json:"page,omitempty"`
	Size           NullableInt32     `json:"size,omitempty"`
}

// NewGetTokens instantiates a new GetTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTokens() *GetTokens {
	this := GetTokens{}
	return &this
}

// NewGetTokensWithDefaults instantiates a new GetTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTokensWithDefaults() *GetTokens {
	this := GetTokens{}
	return &this
}

// GetTypes returns the Types field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTokens) GetTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTokens) GetTypesOk() ([]string, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *GetTokens) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *GetTokens) SetTypes(v []string) {
	o.Types = v
}

// GetTokenIds returns the TokenIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTokens) GetTokenIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TokenIds
}

// GetTokenIdsOk returns a tuple with the TokenIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTokens) GetTokenIdsOk() ([]string, bool) {
	if o == nil || o.TokenIds == nil {
		return nil, false
	}
	return o.TokenIds, true
}

// HasTokenIds returns a boolean if a field has been set.
func (o *GetTokens) HasTokenIds() bool {
	if o != nil && o.TokenIds != nil {
		return true
	}

	return false
}

// SetTokenIds gets a reference to the given []string and assigns it to the TokenIds field.
func (o *GetTokens) SetTokenIds(v []string) {
	o.TokenIds = v
}

// GetMetadataSearch returns the MetadataSearch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTokens) GetMetadataSearch() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.MetadataSearch
}

// GetMetadataSearchOk returns a tuple with the MetadataSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTokens) GetMetadataSearchOk() (*map[string]string, bool) {
	if o == nil || o.MetadataSearch == nil {
		return nil, false
	}
	return &o.MetadataSearch, true
}

// HasMetadataSearch returns a boolean if a field has been set.
func (o *GetTokens) HasMetadataSearch() bool {
	if o != nil && o.MetadataSearch != nil {
		return true
	}

	return false
}

// SetMetadataSearch gets a reference to the given map[string]string and assigns it to the MetadataSearch field.
func (o *GetTokens) SetMetadataSearch(v map[string]string) {
	o.MetadataSearch = v
}

// GetPage returns the Page field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTokens) GetPage() int32 {
	if o == nil || o.Page.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Page.Get()
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTokens) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Page.Get(), o.Page.IsSet()
}

// HasPage returns a boolean if a field has been set.
func (o *GetTokens) HasPage() bool {
	if o != nil && o.Page.IsSet() {
		return true
	}

	return false
}

// SetPage gets a reference to the given NullableInt32 and assigns it to the Page field.
func (o *GetTokens) SetPage(v int32) {
	o.Page.Set(&v)
}

// SetPageNil sets the value for Page to be an explicit nil
func (o *GetTokens) SetPageNil() {
	o.Page.Set(nil)
}

// UnsetPage ensures that no value is present for Page, not even an explicit nil
func (o *GetTokens) UnsetPage() {
	o.Page.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTokens) GetSize() int32 {
	if o == nil || o.Size.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTokens) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *GetTokens) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *GetTokens) SetSize(v int32) {
	o.Size.Set(&v)
}

// SetSizeNil sets the value for Size to be an explicit nil
func (o *GetTokens) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *GetTokens) UnsetSize() {
	o.Size.Unset()
}

func (o GetTokens) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	if o.TokenIds != nil {
		toSerialize["tokenIds"] = o.TokenIds
	}
	if o.MetadataSearch != nil {
		toSerialize["metadataSearch"] = o.MetadataSearch
	}
	if o.Page.IsSet() {
		toSerialize["page"] = o.Page.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGetTokens struct {
	value *GetTokens
	isSet bool
}

func (v NullableGetTokens) Get() *GetTokens {
	return v.value
}

func (v *NullableGetTokens) Set(val *GetTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTokens(val *GetTokens) *NullableGetTokens {
	return &NullableGetTokens{value: val, isSet: true}
}

func (v NullableGetTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
