/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ReactRequestAsync type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactRequestAsync{}

// ReactRequestAsync struct for ReactRequestAsync
type ReactRequestAsync struct {
	Args interface{} `json:"args,omitempty"`
}

// NewReactRequestAsync instantiates a new ReactRequestAsync object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactRequestAsync() *ReactRequestAsync {
	this := ReactRequestAsync{}
	return &this
}

// NewReactRequestAsyncWithDefaults instantiates a new ReactRequestAsync object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactRequestAsyncWithDefaults() *ReactRequestAsync {
	this := ReactRequestAsync{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReactRequestAsync) GetArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReactRequestAsync) GetArgsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return &o.Args, true
}

// HasArgs returns a boolean if a field is not nil.
func (o *ReactRequestAsync) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given interface{} and assigns it to the Args field.
func (o *ReactRequestAsync) SetArgs(v interface{}) {
	o.Args = v
}

func (o ReactRequestAsync) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactRequestAsync) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableReactRequestAsync struct {
	value *ReactRequestAsync
	isSet bool
}

func (v NullableReactRequestAsync) Get() *ReactRequestAsync {
	return v.value
}

func (v *NullableReactRequestAsync) Set(val *ReactRequestAsync) {
	v.value = val
	v.isSet = true
}

func (v NullableReactRequestAsync) IsSet() bool {
	return v.isSet
}

func (v *NullableReactRequestAsync) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactRequestAsync(val *ReactRequestAsync) *NullableReactRequestAsync {
	return &NullableReactRequestAsync{value: val, isSet: true}
}

func (v NullableReactRequestAsync) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactRequestAsync) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
