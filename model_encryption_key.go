/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// EncryptionKey struct for EncryptionKey
type EncryptionKey struct {
	Key  string         `json:"key"`
	Prov NullableString `json:"prov,omitempty"`
	Alg  NullableString `json:"alg,omitempty"`
}

// NewEncryptionKey instantiates a new EncryptionKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionKey(key string) *EncryptionKey {
	this := EncryptionKey{}
	this.Key = key
	return &this
}

// NewEncryptionKeyWithDefaults instantiates a new EncryptionKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionKeyWithDefaults() *EncryptionKey {
	this := EncryptionKey{}
	return &this
}

// GetKey returns the Key field value
func (o *EncryptionKey) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *EncryptionKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *EncryptionKey) SetKey(v string) {
	o.Key = v
}

// GetProv returns the Prov field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionKey) GetProv() string {
	if o == nil || o.Prov.Get() == nil {
		var ret string
		return ret
	}
	return *o.Prov.Get()
}

// GetProvOk returns a tuple with the Prov field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionKey) GetProvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prov.Get(), o.Prov.IsSet()
}

// HasProv returns a boolean if a field has been set.
func (o *EncryptionKey) HasProv() bool {
	if o != nil && o.Prov.IsSet() {
		return true
	}

	return false
}

// SetProv gets a reference to the given NullableString and assigns it to the Prov field.
func (o *EncryptionKey) SetProv(v string) {
	o.Prov.Set(&v)
}

// SetProvNil sets the value for Prov to be an explicit nil
func (o *EncryptionKey) SetProvNil() {
	o.Prov.Set(nil)
}

// UnsetProv ensures that no value is present for Prov, not even an explicit nil
func (o *EncryptionKey) UnsetProv() {
	o.Prov.Unset()
}

// GetAlg returns the Alg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionKey) GetAlg() string {
	if o == nil || o.Alg.Get() == nil {
		var ret string
		return ret
	}
	return *o.Alg.Get()
}

// GetAlgOk returns a tuple with the Alg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionKey) GetAlgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alg.Get(), o.Alg.IsSet()
}

// HasAlg returns a boolean if a field has been set.
func (o *EncryptionKey) HasAlg() bool {
	if o != nil && o.Alg.IsSet() {
		return true
	}

	return false
}

// SetAlg gets a reference to the given NullableString and assigns it to the Alg field.
func (o *EncryptionKey) SetAlg(v string) {
	o.Alg.Set(&v)
}

// SetAlgNil sets the value for Alg to be an explicit nil
func (o *EncryptionKey) SetAlgNil() {
	o.Alg.Set(nil)
}

// UnsetAlg ensures that no value is present for Alg, not even an explicit nil
func (o *EncryptionKey) UnsetAlg() {
	o.Alg.Unset()
}

func (o EncryptionKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.Prov.IsSet() {
		toSerialize["prov"] = o.Prov.Get()
	}
	if o.Alg.IsSet() {
		toSerialize["alg"] = o.Alg.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptionKey struct {
	value *EncryptionKey
	isSet bool
}

func (v NullableEncryptionKey) Get() *EncryptionKey {
	return v.value
}

func (v *NullableEncryptionKey) Set(val *EncryptionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionKey(val *EncryptionKey) *NullableEncryptionKey {
	return &NullableEncryptionKey{value: val, isSet: true}
}

func (v NullableEncryptionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
