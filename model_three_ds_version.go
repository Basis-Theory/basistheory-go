/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSVersion{}

// ThreeDSVersion struct for ThreeDSVersion
type ThreeDSVersion struct {
	RecommendedVersion          NullableString `json:"recommended_version,omitempty"`
	AvailableVersion            []string       `json:"available_version,omitempty"`
	EarliestAcsSupportedVersion NullableString `json:"earliest_acs_supported_version,omitempty"`
	EarliestDsSupportedVersion  NullableString `json:"earliest_ds_supported_version,omitempty"`
	LatestAcsSupportedVersion   NullableString `json:"latest_acs_supported_version,omitempty"`
	LatestDsSupportedVersion    NullableString `json:"latest_ds_supported_version,omitempty"`
	AcsInformation              []string       `json:"acs_information,omitempty"`
}

// NewThreeDSVersion instantiates a new ThreeDSVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSVersion() *ThreeDSVersion {
	this := ThreeDSVersion{}
	return &this
}

// NewThreeDSVersionWithDefaults instantiates a new ThreeDSVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSVersionWithDefaults() *ThreeDSVersion {
	this := ThreeDSVersion{}
	return &this
}

// GetRecommendedVersion returns the RecommendedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetRecommendedVersion() string {
	if o == nil || IsNil(o.RecommendedVersion.Get()) {
		var ret string
		return ret
	}
	return *o.RecommendedVersion.Get()
}

// GetRecommendedVersionOk returns a tuple with the RecommendedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetRecommendedVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecommendedVersion.Get(), o.RecommendedVersion.IsSet()
}

// HasRecommendedVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasRecommendedVersion() bool {
	if o != nil && !IsNil(o.RecommendedVersion) {
		return true
	}

	return false
}

// SetRecommendedVersion gets a reference to the given NullableString and assigns it to the RecommendedVersion field.
func (o *ThreeDSVersion) SetRecommendedVersion(v string) {
	o.RecommendedVersion.Set(&v)
}

// SetRecommendedVersionNil sets the value for RecommendedVersion to be an explicit nil
func (o *ThreeDSVersion) SetRecommendedVersionNil() {
	o.RecommendedVersion.Set(nil)
}

// UnsetRecommendedVersion ensures that no value is present for RecommendedVersion, not even an explicit nil
func (o *ThreeDSVersion) UnsetRecommendedVersion() {
	o.RecommendedVersion.Unset()
}

// GetAvailableVersion returns the AvailableVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetAvailableVersion() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AvailableVersion
}

// GetAvailableVersionOk returns a tuple with the AvailableVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetAvailableVersionOk() ([]string, bool) {
	if o == nil || IsNil(o.AvailableVersion) {
		return nil, false
	}
	return o.AvailableVersion, true
}

// HasAvailableVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasAvailableVersion() bool {
	if o != nil && !IsNil(o.AvailableVersion) {
		return true
	}

	return false
}

// SetAvailableVersion gets a reference to the given []string and assigns it to the AvailableVersion field.
func (o *ThreeDSVersion) SetAvailableVersion(v []string) {
	o.AvailableVersion = v
}

// GetEarliestAcsSupportedVersion returns the EarliestAcsSupportedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetEarliestAcsSupportedVersion() string {
	if o == nil || IsNil(o.EarliestAcsSupportedVersion.Get()) {
		var ret string
		return ret
	}
	return *o.EarliestAcsSupportedVersion.Get()
}

// GetEarliestAcsSupportedVersionOk returns a tuple with the EarliestAcsSupportedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetEarliestAcsSupportedVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EarliestAcsSupportedVersion.Get(), o.EarliestAcsSupportedVersion.IsSet()
}

// HasEarliestAcsSupportedVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasEarliestAcsSupportedVersion() bool {
	if o != nil && !IsNil(o.EarliestAcsSupportedVersion) {
		return true
	}

	return false
}

// SetEarliestAcsSupportedVersion gets a reference to the given NullableString and assigns it to the EarliestAcsSupportedVersion field.
func (o *ThreeDSVersion) SetEarliestAcsSupportedVersion(v string) {
	o.EarliestAcsSupportedVersion.Set(&v)
}

// SetEarliestAcsSupportedVersionNil sets the value for EarliestAcsSupportedVersion to be an explicit nil
func (o *ThreeDSVersion) SetEarliestAcsSupportedVersionNil() {
	o.EarliestAcsSupportedVersion.Set(nil)
}

// UnsetEarliestAcsSupportedVersion ensures that no value is present for EarliestAcsSupportedVersion, not even an explicit nil
func (o *ThreeDSVersion) UnsetEarliestAcsSupportedVersion() {
	o.EarliestAcsSupportedVersion.Unset()
}

// GetEarliestDsSupportedVersion returns the EarliestDsSupportedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetEarliestDsSupportedVersion() string {
	if o == nil || IsNil(o.EarliestDsSupportedVersion.Get()) {
		var ret string
		return ret
	}
	return *o.EarliestDsSupportedVersion.Get()
}

// GetEarliestDsSupportedVersionOk returns a tuple with the EarliestDsSupportedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetEarliestDsSupportedVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EarliestDsSupportedVersion.Get(), o.EarliestDsSupportedVersion.IsSet()
}

// HasEarliestDsSupportedVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasEarliestDsSupportedVersion() bool {
	if o != nil && !IsNil(o.EarliestDsSupportedVersion) {
		return true
	}

	return false
}

// SetEarliestDsSupportedVersion gets a reference to the given NullableString and assigns it to the EarliestDsSupportedVersion field.
func (o *ThreeDSVersion) SetEarliestDsSupportedVersion(v string) {
	o.EarliestDsSupportedVersion.Set(&v)
}

// SetEarliestDsSupportedVersionNil sets the value for EarliestDsSupportedVersion to be an explicit nil
func (o *ThreeDSVersion) SetEarliestDsSupportedVersionNil() {
	o.EarliestDsSupportedVersion.Set(nil)
}

// UnsetEarliestDsSupportedVersion ensures that no value is present for EarliestDsSupportedVersion, not even an explicit nil
func (o *ThreeDSVersion) UnsetEarliestDsSupportedVersion() {
	o.EarliestDsSupportedVersion.Unset()
}

// GetLatestAcsSupportedVersion returns the LatestAcsSupportedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetLatestAcsSupportedVersion() string {
	if o == nil || IsNil(o.LatestAcsSupportedVersion.Get()) {
		var ret string
		return ret
	}
	return *o.LatestAcsSupportedVersion.Get()
}

// GetLatestAcsSupportedVersionOk returns a tuple with the LatestAcsSupportedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetLatestAcsSupportedVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestAcsSupportedVersion.Get(), o.LatestAcsSupportedVersion.IsSet()
}

// HasLatestAcsSupportedVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasLatestAcsSupportedVersion() bool {
	if o != nil && !IsNil(o.LatestAcsSupportedVersion) {
		return true
	}

	return false
}

// SetLatestAcsSupportedVersion gets a reference to the given NullableString and assigns it to the LatestAcsSupportedVersion field.
func (o *ThreeDSVersion) SetLatestAcsSupportedVersion(v string) {
	o.LatestAcsSupportedVersion.Set(&v)
}

// SetLatestAcsSupportedVersionNil sets the value for LatestAcsSupportedVersion to be an explicit nil
func (o *ThreeDSVersion) SetLatestAcsSupportedVersionNil() {
	o.LatestAcsSupportedVersion.Set(nil)
}

// UnsetLatestAcsSupportedVersion ensures that no value is present for LatestAcsSupportedVersion, not even an explicit nil
func (o *ThreeDSVersion) UnsetLatestAcsSupportedVersion() {
	o.LatestAcsSupportedVersion.Unset()
}

// GetLatestDsSupportedVersion returns the LatestDsSupportedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetLatestDsSupportedVersion() string {
	if o == nil || IsNil(o.LatestDsSupportedVersion.Get()) {
		var ret string
		return ret
	}
	return *o.LatestDsSupportedVersion.Get()
}

// GetLatestDsSupportedVersionOk returns a tuple with the LatestDsSupportedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetLatestDsSupportedVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestDsSupportedVersion.Get(), o.LatestDsSupportedVersion.IsSet()
}

// HasLatestDsSupportedVersion returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasLatestDsSupportedVersion() bool {
	if o != nil && !IsNil(o.LatestDsSupportedVersion) {
		return true
	}

	return false
}

// SetLatestDsSupportedVersion gets a reference to the given NullableString and assigns it to the LatestDsSupportedVersion field.
func (o *ThreeDSVersion) SetLatestDsSupportedVersion(v string) {
	o.LatestDsSupportedVersion.Set(&v)
}

// SetLatestDsSupportedVersionNil sets the value for LatestDsSupportedVersion to be an explicit nil
func (o *ThreeDSVersion) SetLatestDsSupportedVersionNil() {
	o.LatestDsSupportedVersion.Set(nil)
}

// UnsetLatestDsSupportedVersion ensures that no value is present for LatestDsSupportedVersion, not even an explicit nil
func (o *ThreeDSVersion) UnsetLatestDsSupportedVersion() {
	o.LatestDsSupportedVersion.Unset()
}

// GetAcsInformation returns the AcsInformation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSVersion) GetAcsInformation() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AcsInformation
}

// GetAcsInformationOk returns a tuple with the AcsInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSVersion) GetAcsInformationOk() ([]string, bool) {
	if o == nil || IsNil(o.AcsInformation) {
		return nil, false
	}
	return o.AcsInformation, true
}

// HasAcsInformation returns a boolean if a field is not nil.
func (o *ThreeDSVersion) HasAcsInformation() bool {
	if o != nil && !IsNil(o.AcsInformation) {
		return true
	}

	return false
}

// SetAcsInformation gets a reference to the given []string and assigns it to the AcsInformation field.
func (o *ThreeDSVersion) SetAcsInformation(v []string) {
	o.AcsInformation = v
}

func (o ThreeDSVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RecommendedVersion.IsSet() {
		toSerialize["recommended_version"] = o.RecommendedVersion.Get()
	}
	if o.AvailableVersion != nil {
		toSerialize["available_version"] = o.AvailableVersion
	}
	if o.EarliestAcsSupportedVersion.IsSet() {
		toSerialize["earliest_acs_supported_version"] = o.EarliestAcsSupportedVersion.Get()
	}
	if o.EarliestDsSupportedVersion.IsSet() {
		toSerialize["earliest_ds_supported_version"] = o.EarliestDsSupportedVersion.Get()
	}
	if o.LatestAcsSupportedVersion.IsSet() {
		toSerialize["latest_acs_supported_version"] = o.LatestAcsSupportedVersion.Get()
	}
	if o.LatestDsSupportedVersion.IsSet() {
		toSerialize["latest_ds_supported_version"] = o.LatestDsSupportedVersion.Get()
	}
	if o.AcsInformation != nil {
		toSerialize["acs_information"] = o.AcsInformation
	}
	return toSerialize, nil
}

type NullableThreeDSVersion struct {
	value *ThreeDSVersion
	isSet bool
}

func (v NullableThreeDSVersion) Get() *ThreeDSVersion {
	return v.value
}

func (v *NullableThreeDSVersion) Set(val *ThreeDSVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSVersion(val *ThreeDSVersion) *NullableThreeDSVersion {
	return &NullableThreeDSVersion{value: val, isSet: true}
}

func (v NullableThreeDSVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
