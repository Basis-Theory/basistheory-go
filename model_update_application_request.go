/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// UpdateApplicationRequest struct for UpdateApplicationRequest
type UpdateApplicationRequest struct {
	Name                          string       `json:"name"`
	CanCreateExpiringApplications NullableBool `json:"can_create_expiring_applications,omitempty"`
	Permissions                   []string     `json:"permissions,omitempty"`
	Rules                         []AccessRule `json:"rules,omitempty"`
}

// NewUpdateApplicationRequest instantiates a new UpdateApplicationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateApplicationRequest(name string) *UpdateApplicationRequest {
	this := UpdateApplicationRequest{}
	this.Name = name
	return &this
}

// NewUpdateApplicationRequestWithDefaults instantiates a new UpdateApplicationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApplicationRequestWithDefaults() *UpdateApplicationRequest {
	this := UpdateApplicationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateApplicationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateApplicationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateApplicationRequest) SetName(v string) {
	o.Name = v
}

// GetCanCreateExpiringApplications returns the CanCreateExpiringApplications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationRequest) GetCanCreateExpiringApplications() bool {
	if o == nil || isNil(o.CanCreateExpiringApplications.Get()) {
		var ret bool
		return ret
	}
	return *o.CanCreateExpiringApplications.Get()
}

// GetCanCreateExpiringApplicationsOk returns a tuple with the CanCreateExpiringApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationRequest) GetCanCreateExpiringApplicationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanCreateExpiringApplications.Get(), o.CanCreateExpiringApplications.IsSet()
}

// HasCanCreateExpiringApplications returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasCanCreateExpiringApplications() bool {
	if o != nil && o.CanCreateExpiringApplications.IsSet() {
		return true
	}

	return false
}

// SetCanCreateExpiringApplications gets a reference to the given NullableBool and assigns it to the CanCreateExpiringApplications field.
func (o *UpdateApplicationRequest) SetCanCreateExpiringApplications(v bool) {
	o.CanCreateExpiringApplications.Set(&v)
}

// SetCanCreateExpiringApplicationsNil sets the value for CanCreateExpiringApplications to be an explicit nil
func (o *UpdateApplicationRequest) SetCanCreateExpiringApplicationsNil() {
	o.CanCreateExpiringApplications.Set(nil)
}

// UnsetCanCreateExpiringApplications ensures that no value is present for CanCreateExpiringApplications, not even an explicit nil
func (o *UpdateApplicationRequest) UnsetCanCreateExpiringApplications() {
	o.CanCreateExpiringApplications.Unset()
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationRequest) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationRequest) GetPermissionsOk() ([]string, bool) {
	if o == nil || isNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasPermissions() bool {
	if o != nil && isNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *UpdateApplicationRequest) SetPermissions(v []string) {
	o.Permissions = v
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationRequest) GetRules() []AccessRule {
	if o == nil {
		var ret []AccessRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationRequest) GetRulesOk() ([]AccessRule, bool) {
	if o == nil || isNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *UpdateApplicationRequest) HasRules() bool {
	if o != nil && isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []AccessRule and assigns it to the Rules field.
func (o *UpdateApplicationRequest) SetRules(v []AccessRule) {
	o.Rules = v
}

func (o UpdateApplicationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.CanCreateExpiringApplications.IsSet() {
		toSerialize["can_create_expiring_applications"] = o.CanCreateExpiringApplications.Get()
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateApplicationRequest struct {
	value *UpdateApplicationRequest
	isSet bool
}

func (v NullableUpdateApplicationRequest) Get() *UpdateApplicationRequest {
	return v.value
}

func (v *NullableUpdateApplicationRequest) Set(val *UpdateApplicationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApplicationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApplicationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApplicationRequest(val *UpdateApplicationRequest) *NullableUpdateApplicationRequest {
	return &NullableUpdateApplicationRequest{value: val, isSet: true}
}

func (v NullableUpdateApplicationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApplicationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
