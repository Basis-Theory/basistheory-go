/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the BinDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BinDetails{}

// BinDetails struct for BinDetails
type BinDetails struct {
	CardBrand       NullableString     `json:"card_brand,omitempty"`
	Type            NullableString     `json:"type,omitempty"`
	Prepaid         NullableBool       `json:"prepaid,omitempty"`
	CardSegmentType NullableString     `json:"card_segment_type,omitempty"`
	Bank            *BinDetailsBank    `json:"bank,omitempty"`
	Product         *BinDetailsProduct `json:"product,omitempty"`
	Country         *BinDetailsCountry `json:"country,omitempty"`
	Reloadable      NullableBool       `json:"reloadable,omitempty"`
	PanOrToken      NullableString     `json:"pan_or_token,omitempty"`
	AccountUpdater  NullableBool       `json:"account_updater,omitempty"`
	Alm             NullableBool       `json:"alm,omitempty"`
	DomesticOnly    NullableBool       `json:"domestic_only,omitempty"`
	GamblingBlocked NullableBool       `json:"gambling_blocked,omitempty"`
	Level2          NullableBool       `json:"level2,omitempty"`
	Level3          NullableBool       `json:"level3,omitempty"`
	IssuerCurrency  NullableString     `json:"issuer_currency,omitempty"`
	ComboCard       NullableString     `json:"combo_card,omitempty"`
	BinLength       NullableInt32      `json:"bin_length,omitempty"`
	Authentication  interface{}        `json:"authentication,omitempty"`
	Cost            interface{}        `json:"cost,omitempty"`
}

// NewBinDetails instantiates a new BinDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinDetails() *BinDetails {
	this := BinDetails{}
	return &this
}

// NewBinDetailsWithDefaults instantiates a new BinDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinDetailsWithDefaults() *BinDetails {
	this := BinDetails{}
	return &this
}

// GetCardBrand returns the CardBrand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetCardBrand() string {
	if o == nil || IsNil(o.CardBrand.Get()) {
		var ret string
		return ret
	}
	return *o.CardBrand.Get()
}

// GetCardBrandOk returns a tuple with the CardBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetCardBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardBrand.Get(), o.CardBrand.IsSet()
}

// HasCardBrand returns a boolean if a field is not nil.
func (o *BinDetails) HasCardBrand() bool {
	if o != nil && !IsNil(o.CardBrand) {
		return true
	}

	return false
}

// SetCardBrand gets a reference to the given NullableString and assigns it to the CardBrand field.
func (o *BinDetails) SetCardBrand(v string) {
	o.CardBrand.Set(&v)
}

// SetCardBrandNil sets the value for CardBrand to be an explicit nil
func (o *BinDetails) SetCardBrandNil() {
	o.CardBrand.Set(nil)
}

// UnsetCardBrand ensures that no value is present for CardBrand, not even an explicit nil
func (o *BinDetails) UnsetCardBrand() {
	o.CardBrand.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field is not nil.
func (o *BinDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *BinDetails) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *BinDetails) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *BinDetails) UnsetType() {
	o.Type.Unset()
}

// GetPrepaid returns the Prepaid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetPrepaid() bool {
	if o == nil || IsNil(o.Prepaid.Get()) {
		var ret bool
		return ret
	}
	return *o.Prepaid.Get()
}

// GetPrepaidOk returns a tuple with the Prepaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetPrepaidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prepaid.Get(), o.Prepaid.IsSet()
}

// HasPrepaid returns a boolean if a field is not nil.
func (o *BinDetails) HasPrepaid() bool {
	if o != nil && !IsNil(o.Prepaid) {
		return true
	}

	return false
}

// SetPrepaid gets a reference to the given NullableBool and assigns it to the Prepaid field.
func (o *BinDetails) SetPrepaid(v bool) {
	o.Prepaid.Set(&v)
}

// SetPrepaidNil sets the value for Prepaid to be an explicit nil
func (o *BinDetails) SetPrepaidNil() {
	o.Prepaid.Set(nil)
}

// UnsetPrepaid ensures that no value is present for Prepaid, not even an explicit nil
func (o *BinDetails) UnsetPrepaid() {
	o.Prepaid.Unset()
}

// GetCardSegmentType returns the CardSegmentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetCardSegmentType() string {
	if o == nil || IsNil(o.CardSegmentType.Get()) {
		var ret string
		return ret
	}
	return *o.CardSegmentType.Get()
}

// GetCardSegmentTypeOk returns a tuple with the CardSegmentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetCardSegmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardSegmentType.Get(), o.CardSegmentType.IsSet()
}

// HasCardSegmentType returns a boolean if a field is not nil.
func (o *BinDetails) HasCardSegmentType() bool {
	if o != nil && !IsNil(o.CardSegmentType) {
		return true
	}

	return false
}

// SetCardSegmentType gets a reference to the given NullableString and assigns it to the CardSegmentType field.
func (o *BinDetails) SetCardSegmentType(v string) {
	o.CardSegmentType.Set(&v)
}

// SetCardSegmentTypeNil sets the value for CardSegmentType to be an explicit nil
func (o *BinDetails) SetCardSegmentTypeNil() {
	o.CardSegmentType.Set(nil)
}

// UnsetCardSegmentType ensures that no value is present for CardSegmentType, not even an explicit nil
func (o *BinDetails) UnsetCardSegmentType() {
	o.CardSegmentType.Unset()
}

// GetBank returns the Bank field value if set, zero value otherwise.
func (o *BinDetails) GetBank() BinDetailsBank {
	if o == nil || IsNil(o.Bank) {
		var ret BinDetailsBank
		return ret
	}
	return *o.Bank
}

// GetBankOk returns a tuple with the Bank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinDetails) GetBankOk() (*BinDetailsBank, bool) {
	if o == nil || IsNil(o.Bank) {
		return nil, false
	}
	return o.Bank, true
}

// HasBank returns a boolean if a field is not nil.
func (o *BinDetails) HasBank() bool {
	if o != nil && !IsNil(o.Bank) {
		return true
	}

	return false
}

// SetBank gets a reference to the given BinDetailsBank and assigns it to the Bank field.
func (o *BinDetails) SetBank(v BinDetailsBank) {
	o.Bank = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *BinDetails) GetProduct() BinDetailsProduct {
	if o == nil || IsNil(o.Product) {
		var ret BinDetailsProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinDetails) GetProductOk() (*BinDetailsProduct, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field is not nil.
func (o *BinDetails) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given BinDetailsProduct and assigns it to the Product field.
func (o *BinDetails) SetProduct(v BinDetailsProduct) {
	o.Product = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *BinDetails) GetCountry() BinDetailsCountry {
	if o == nil || IsNil(o.Country) {
		var ret BinDetailsCountry
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BinDetails) GetCountryOk() (*BinDetailsCountry, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field is not nil.
func (o *BinDetails) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given BinDetailsCountry and assigns it to the Country field.
func (o *BinDetails) SetCountry(v BinDetailsCountry) {
	o.Country = &v
}

// GetReloadable returns the Reloadable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetReloadable() bool {
	if o == nil || IsNil(o.Reloadable.Get()) {
		var ret bool
		return ret
	}
	return *o.Reloadable.Get()
}

// GetReloadableOk returns a tuple with the Reloadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetReloadableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reloadable.Get(), o.Reloadable.IsSet()
}

// HasReloadable returns a boolean if a field is not nil.
func (o *BinDetails) HasReloadable() bool {
	if o != nil && !IsNil(o.Reloadable) {
		return true
	}

	return false
}

// SetReloadable gets a reference to the given NullableBool and assigns it to the Reloadable field.
func (o *BinDetails) SetReloadable(v bool) {
	o.Reloadable.Set(&v)
}

// SetReloadableNil sets the value for Reloadable to be an explicit nil
func (o *BinDetails) SetReloadableNil() {
	o.Reloadable.Set(nil)
}

// UnsetReloadable ensures that no value is present for Reloadable, not even an explicit nil
func (o *BinDetails) UnsetReloadable() {
	o.Reloadable.Unset()
}

// GetPanOrToken returns the PanOrToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetPanOrToken() string {
	if o == nil || IsNil(o.PanOrToken.Get()) {
		var ret string
		return ret
	}
	return *o.PanOrToken.Get()
}

// GetPanOrTokenOk returns a tuple with the PanOrToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetPanOrTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PanOrToken.Get(), o.PanOrToken.IsSet()
}

// HasPanOrToken returns a boolean if a field is not nil.
func (o *BinDetails) HasPanOrToken() bool {
	if o != nil && !IsNil(o.PanOrToken) {
		return true
	}

	return false
}

// SetPanOrToken gets a reference to the given NullableString and assigns it to the PanOrToken field.
func (o *BinDetails) SetPanOrToken(v string) {
	o.PanOrToken.Set(&v)
}

// SetPanOrTokenNil sets the value for PanOrToken to be an explicit nil
func (o *BinDetails) SetPanOrTokenNil() {
	o.PanOrToken.Set(nil)
}

// UnsetPanOrToken ensures that no value is present for PanOrToken, not even an explicit nil
func (o *BinDetails) UnsetPanOrToken() {
	o.PanOrToken.Unset()
}

// GetAccountUpdater returns the AccountUpdater field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetAccountUpdater() bool {
	if o == nil || IsNil(o.AccountUpdater.Get()) {
		var ret bool
		return ret
	}
	return *o.AccountUpdater.Get()
}

// GetAccountUpdaterOk returns a tuple with the AccountUpdater field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetAccountUpdaterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountUpdater.Get(), o.AccountUpdater.IsSet()
}

// HasAccountUpdater returns a boolean if a field is not nil.
func (o *BinDetails) HasAccountUpdater() bool {
	if o != nil && !IsNil(o.AccountUpdater) {
		return true
	}

	return false
}

// SetAccountUpdater gets a reference to the given NullableBool and assigns it to the AccountUpdater field.
func (o *BinDetails) SetAccountUpdater(v bool) {
	o.AccountUpdater.Set(&v)
}

// SetAccountUpdaterNil sets the value for AccountUpdater to be an explicit nil
func (o *BinDetails) SetAccountUpdaterNil() {
	o.AccountUpdater.Set(nil)
}

// UnsetAccountUpdater ensures that no value is present for AccountUpdater, not even an explicit nil
func (o *BinDetails) UnsetAccountUpdater() {
	o.AccountUpdater.Unset()
}

// GetAlm returns the Alm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetAlm() bool {
	if o == nil || IsNil(o.Alm.Get()) {
		var ret bool
		return ret
	}
	return *o.Alm.Get()
}

// GetAlmOk returns a tuple with the Alm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetAlmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alm.Get(), o.Alm.IsSet()
}

// HasAlm returns a boolean if a field is not nil.
func (o *BinDetails) HasAlm() bool {
	if o != nil && !IsNil(o.Alm) {
		return true
	}

	return false
}

// SetAlm gets a reference to the given NullableBool and assigns it to the Alm field.
func (o *BinDetails) SetAlm(v bool) {
	o.Alm.Set(&v)
}

// SetAlmNil sets the value for Alm to be an explicit nil
func (o *BinDetails) SetAlmNil() {
	o.Alm.Set(nil)
}

// UnsetAlm ensures that no value is present for Alm, not even an explicit nil
func (o *BinDetails) UnsetAlm() {
	o.Alm.Unset()
}

// GetDomesticOnly returns the DomesticOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetDomesticOnly() bool {
	if o == nil || IsNil(o.DomesticOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.DomesticOnly.Get()
}

// GetDomesticOnlyOk returns a tuple with the DomesticOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetDomesticOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomesticOnly.Get(), o.DomesticOnly.IsSet()
}

// HasDomesticOnly returns a boolean if a field is not nil.
func (o *BinDetails) HasDomesticOnly() bool {
	if o != nil && !IsNil(o.DomesticOnly) {
		return true
	}

	return false
}

// SetDomesticOnly gets a reference to the given NullableBool and assigns it to the DomesticOnly field.
func (o *BinDetails) SetDomesticOnly(v bool) {
	o.DomesticOnly.Set(&v)
}

// SetDomesticOnlyNil sets the value for DomesticOnly to be an explicit nil
func (o *BinDetails) SetDomesticOnlyNil() {
	o.DomesticOnly.Set(nil)
}

// UnsetDomesticOnly ensures that no value is present for DomesticOnly, not even an explicit nil
func (o *BinDetails) UnsetDomesticOnly() {
	o.DomesticOnly.Unset()
}

// GetGamblingBlocked returns the GamblingBlocked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetGamblingBlocked() bool {
	if o == nil || IsNil(o.GamblingBlocked.Get()) {
		var ret bool
		return ret
	}
	return *o.GamblingBlocked.Get()
}

// GetGamblingBlockedOk returns a tuple with the GamblingBlocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetGamblingBlockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.GamblingBlocked.Get(), o.GamblingBlocked.IsSet()
}

// HasGamblingBlocked returns a boolean if a field is not nil.
func (o *BinDetails) HasGamblingBlocked() bool {
	if o != nil && !IsNil(o.GamblingBlocked) {
		return true
	}

	return false
}

// SetGamblingBlocked gets a reference to the given NullableBool and assigns it to the GamblingBlocked field.
func (o *BinDetails) SetGamblingBlocked(v bool) {
	o.GamblingBlocked.Set(&v)
}

// SetGamblingBlockedNil sets the value for GamblingBlocked to be an explicit nil
func (o *BinDetails) SetGamblingBlockedNil() {
	o.GamblingBlocked.Set(nil)
}

// UnsetGamblingBlocked ensures that no value is present for GamblingBlocked, not even an explicit nil
func (o *BinDetails) UnsetGamblingBlocked() {
	o.GamblingBlocked.Unset()
}

// GetLevel2 returns the Level2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetLevel2() bool {
	if o == nil || IsNil(o.Level2.Get()) {
		var ret bool
		return ret
	}
	return *o.Level2.Get()
}

// GetLevel2Ok returns a tuple with the Level2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetLevel2Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level2.Get(), o.Level2.IsSet()
}

// HasLevel2 returns a boolean if a field is not nil.
func (o *BinDetails) HasLevel2() bool {
	if o != nil && !IsNil(o.Level2) {
		return true
	}

	return false
}

// SetLevel2 gets a reference to the given NullableBool and assigns it to the Level2 field.
func (o *BinDetails) SetLevel2(v bool) {
	o.Level2.Set(&v)
}

// SetLevel2Nil sets the value for Level2 to be an explicit nil
func (o *BinDetails) SetLevel2Nil() {
	o.Level2.Set(nil)
}

// UnsetLevel2 ensures that no value is present for Level2, not even an explicit nil
func (o *BinDetails) UnsetLevel2() {
	o.Level2.Unset()
}

// GetLevel3 returns the Level3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetLevel3() bool {
	if o == nil || IsNil(o.Level3.Get()) {
		var ret bool
		return ret
	}
	return *o.Level3.Get()
}

// GetLevel3Ok returns a tuple with the Level3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetLevel3Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level3.Get(), o.Level3.IsSet()
}

// HasLevel3 returns a boolean if a field is not nil.
func (o *BinDetails) HasLevel3() bool {
	if o != nil && !IsNil(o.Level3) {
		return true
	}

	return false
}

// SetLevel3 gets a reference to the given NullableBool and assigns it to the Level3 field.
func (o *BinDetails) SetLevel3(v bool) {
	o.Level3.Set(&v)
}

// SetLevel3Nil sets the value for Level3 to be an explicit nil
func (o *BinDetails) SetLevel3Nil() {
	o.Level3.Set(nil)
}

// UnsetLevel3 ensures that no value is present for Level3, not even an explicit nil
func (o *BinDetails) UnsetLevel3() {
	o.Level3.Unset()
}

// GetIssuerCurrency returns the IssuerCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetIssuerCurrency() string {
	if o == nil || IsNil(o.IssuerCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.IssuerCurrency.Get()
}

// GetIssuerCurrencyOk returns a tuple with the IssuerCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetIssuerCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerCurrency.Get(), o.IssuerCurrency.IsSet()
}

// HasIssuerCurrency returns a boolean if a field is not nil.
func (o *BinDetails) HasIssuerCurrency() bool {
	if o != nil && !IsNil(o.IssuerCurrency) {
		return true
	}

	return false
}

// SetIssuerCurrency gets a reference to the given NullableString and assigns it to the IssuerCurrency field.
func (o *BinDetails) SetIssuerCurrency(v string) {
	o.IssuerCurrency.Set(&v)
}

// SetIssuerCurrencyNil sets the value for IssuerCurrency to be an explicit nil
func (o *BinDetails) SetIssuerCurrencyNil() {
	o.IssuerCurrency.Set(nil)
}

// UnsetIssuerCurrency ensures that no value is present for IssuerCurrency, not even an explicit nil
func (o *BinDetails) UnsetIssuerCurrency() {
	o.IssuerCurrency.Unset()
}

// GetComboCard returns the ComboCard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetComboCard() string {
	if o == nil || IsNil(o.ComboCard.Get()) {
		var ret string
		return ret
	}
	return *o.ComboCard.Get()
}

// GetComboCardOk returns a tuple with the ComboCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetComboCardOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComboCard.Get(), o.ComboCard.IsSet()
}

// HasComboCard returns a boolean if a field is not nil.
func (o *BinDetails) HasComboCard() bool {
	if o != nil && !IsNil(o.ComboCard) {
		return true
	}

	return false
}

// SetComboCard gets a reference to the given NullableString and assigns it to the ComboCard field.
func (o *BinDetails) SetComboCard(v string) {
	o.ComboCard.Set(&v)
}

// SetComboCardNil sets the value for ComboCard to be an explicit nil
func (o *BinDetails) SetComboCardNil() {
	o.ComboCard.Set(nil)
}

// UnsetComboCard ensures that no value is present for ComboCard, not even an explicit nil
func (o *BinDetails) UnsetComboCard() {
	o.ComboCard.Unset()
}

// GetBinLength returns the BinLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetBinLength() int32 {
	if o == nil || IsNil(o.BinLength.Get()) {
		var ret int32
		return ret
	}
	return *o.BinLength.Get()
}

// GetBinLengthOk returns a tuple with the BinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetBinLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BinLength.Get(), o.BinLength.IsSet()
}

// HasBinLength returns a boolean if a field is not nil.
func (o *BinDetails) HasBinLength() bool {
	if o != nil && !IsNil(o.BinLength) {
		return true
	}

	return false
}

// SetBinLength gets a reference to the given NullableInt32 and assigns it to the BinLength field.
func (o *BinDetails) SetBinLength(v int32) {
	o.BinLength.Set(&v)
}

// SetBinLengthNil sets the value for BinLength to be an explicit nil
func (o *BinDetails) SetBinLengthNil() {
	o.BinLength.Set(nil)
}

// UnsetBinLength ensures that no value is present for BinLength, not even an explicit nil
func (o *BinDetails) UnsetBinLength() {
	o.BinLength.Unset()
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetAuthentication() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetAuthenticationOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return &o.Authentication, true
}

// HasAuthentication returns a boolean if a field is not nil.
func (o *BinDetails) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given interface{} and assigns it to the Authentication field.
func (o *BinDetails) SetAuthentication(v interface{}) {
	o.Authentication = v
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetails) GetCost() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetails) GetCostOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return &o.Cost, true
}

// HasCost returns a boolean if a field is not nil.
func (o *BinDetails) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given interface{} and assigns it to the Cost field.
func (o *BinDetails) SetCost(v interface{}) {
	o.Cost = v
}

func (o BinDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BinDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CardBrand.IsSet() {
		toSerialize["card_brand"] = o.CardBrand.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Prepaid.IsSet() {
		toSerialize["prepaid"] = o.Prepaid.Get()
	}
	if o.CardSegmentType.IsSet() {
		toSerialize["card_segment_type"] = o.CardSegmentType.Get()
	}
	if !IsNil(o.Bank) {
		toSerialize["bank"] = o.Bank
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if o.Reloadable.IsSet() {
		toSerialize["reloadable"] = o.Reloadable.Get()
	}
	if o.PanOrToken.IsSet() {
		toSerialize["pan_or_token"] = o.PanOrToken.Get()
	}
	if o.AccountUpdater.IsSet() {
		toSerialize["account_updater"] = o.AccountUpdater.Get()
	}
	if o.Alm.IsSet() {
		toSerialize["alm"] = o.Alm.Get()
	}
	if o.DomesticOnly.IsSet() {
		toSerialize["domestic_only"] = o.DomesticOnly.Get()
	}
	if o.GamblingBlocked.IsSet() {
		toSerialize["gambling_blocked"] = o.GamblingBlocked.Get()
	}
	if o.Level2.IsSet() {
		toSerialize["level2"] = o.Level2.Get()
	}
	if o.Level3.IsSet() {
		toSerialize["level3"] = o.Level3.Get()
	}
	if o.IssuerCurrency.IsSet() {
		toSerialize["issuer_currency"] = o.IssuerCurrency.Get()
	}
	if o.ComboCard.IsSet() {
		toSerialize["combo_card"] = o.ComboCard.Get()
	}
	if o.BinLength.IsSet() {
		toSerialize["bin_length"] = o.BinLength.Get()
	}
	if o.Authentication != nil {
		toSerialize["authentication"] = o.Authentication
	}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	return toSerialize, nil
}

type NullableBinDetails struct {
	value *BinDetails
	isSet bool
}

func (v NullableBinDetails) Get() *BinDetails {
	return v.value
}

func (v *NullableBinDetails) Set(val *BinDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableBinDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableBinDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinDetails(val *BinDetails) *NullableBinDetails {
	return &NullableBinDetails{value: val, isSet: true}
}

func (v NullableBinDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
