/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ProxyTransform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProxyTransform{}

// ProxyTransform struct for ProxyTransform
type ProxyTransform struct {
	Type        NullableString `json:"type,omitempty"`
	Code        NullableString `json:"code,omitempty"`
	Matcher     NullableString `json:"matcher,omitempty"`
	Expression  NullableString `json:"expression,omitempty"`
	Replacement NullableString `json:"replacement,omitempty"`
}

// NewProxyTransform instantiates a new ProxyTransform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxyTransform() *ProxyTransform {
	this := ProxyTransform{}
	return &this
}

// NewProxyTransformWithDefaults instantiates a new ProxyTransform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxyTransformWithDefaults() *ProxyTransform {
	this := ProxyTransform{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProxyTransform) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProxyTransform) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field is not nil.
func (o *ProxyTransform) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ProxyTransform) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *ProxyTransform) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ProxyTransform) UnsetType() {
	o.Type.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProxyTransform) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProxyTransform) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field is not nil.
func (o *ProxyTransform) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *ProxyTransform) SetCode(v string) {
	o.Code.Set(&v)
}

// SetCodeNil sets the value for Code to be an explicit nil
func (o *ProxyTransform) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *ProxyTransform) UnsetCode() {
	o.Code.Unset()
}

// GetMatcher returns the Matcher field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProxyTransform) GetMatcher() string {
	if o == nil || IsNil(o.Matcher.Get()) {
		var ret string
		return ret
	}
	return *o.Matcher.Get()
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProxyTransform) GetMatcherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matcher.Get(), o.Matcher.IsSet()
}

// HasMatcher returns a boolean if a field is not nil.
func (o *ProxyTransform) HasMatcher() bool {
	if o != nil && !IsNil(o.Matcher) {
		return true
	}

	return false
}

// SetMatcher gets a reference to the given NullableString and assigns it to the Matcher field.
func (o *ProxyTransform) SetMatcher(v string) {
	o.Matcher.Set(&v)
}

// SetMatcherNil sets the value for Matcher to be an explicit nil
func (o *ProxyTransform) SetMatcherNil() {
	o.Matcher.Set(nil)
}

// UnsetMatcher ensures that no value is present for Matcher, not even an explicit nil
func (o *ProxyTransform) UnsetMatcher() {
	o.Matcher.Unset()
}

// GetExpression returns the Expression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProxyTransform) GetExpression() string {
	if o == nil || IsNil(o.Expression.Get()) {
		var ret string
		return ret
	}
	return *o.Expression.Get()
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProxyTransform) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expression.Get(), o.Expression.IsSet()
}

// HasExpression returns a boolean if a field is not nil.
func (o *ProxyTransform) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given NullableString and assigns it to the Expression field.
func (o *ProxyTransform) SetExpression(v string) {
	o.Expression.Set(&v)
}

// SetExpressionNil sets the value for Expression to be an explicit nil
func (o *ProxyTransform) SetExpressionNil() {
	o.Expression.Set(nil)
}

// UnsetExpression ensures that no value is present for Expression, not even an explicit nil
func (o *ProxyTransform) UnsetExpression() {
	o.Expression.Unset()
}

// GetReplacement returns the Replacement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProxyTransform) GetReplacement() string {
	if o == nil || IsNil(o.Replacement.Get()) {
		var ret string
		return ret
	}
	return *o.Replacement.Get()
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProxyTransform) GetReplacementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Replacement.Get(), o.Replacement.IsSet()
}

// HasReplacement returns a boolean if a field is not nil.
func (o *ProxyTransform) HasReplacement() bool {
	if o != nil && !IsNil(o.Replacement) {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given NullableString and assigns it to the Replacement field.
func (o *ProxyTransform) SetReplacement(v string) {
	o.Replacement.Set(&v)
}

// SetReplacementNil sets the value for Replacement to be an explicit nil
func (o *ProxyTransform) SetReplacementNil() {
	o.Replacement.Set(nil)
}

// UnsetReplacement ensures that no value is present for Replacement, not even an explicit nil
func (o *ProxyTransform) UnsetReplacement() {
	o.Replacement.Unset()
}

func (o ProxyTransform) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProxyTransform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Matcher.IsSet() {
		toSerialize["matcher"] = o.Matcher.Get()
	}
	if o.Expression.IsSet() {
		toSerialize["expression"] = o.Expression.Get()
	}
	if o.Replacement.IsSet() {
		toSerialize["replacement"] = o.Replacement.Get()
	}
	return toSerialize, nil
}

type NullableProxyTransform struct {
	value *ProxyTransform
	isSet bool
}

func (v NullableProxyTransform) Get() *ProxyTransform {
	return v.value
}

func (v *NullableProxyTransform) Set(val *ProxyTransform) {
	v.value = val
	v.isSet = true
}

func (v NullableProxyTransform) IsSet() bool {
	return v.isSet
}

func (v *NullableProxyTransform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxyTransform(val *ProxyTransform) *NullableProxyTransform {
	return &NullableProxyTransform{value: val, isSet: true}
}

func (v NullableProxyTransform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxyTransform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
