/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the CreateReactorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateReactorRequest{}

// CreateReactorRequest struct for CreateReactorRequest
type CreateReactorRequest struct {
	Name string `json:"name"`
	// Deprecated
	Formula       *ReactorFormula   `json:"formula,omitempty"`
	Code          NullableString    `json:"code,omitempty"`
	Application   *Application      `json:"application,omitempty"`
	Configuration map[string]string `json:"configuration,omitempty"`
}

// NewCreateReactorRequest instantiates a new CreateReactorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReactorRequest(name string) *CreateReactorRequest {
	this := CreateReactorRequest{}
	this.Name = name
	return &this
}

// NewCreateReactorRequestWithDefaults instantiates a new CreateReactorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReactorRequestWithDefaults() *CreateReactorRequest {
	this := CreateReactorRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateReactorRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateReactorRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateReactorRequest) SetName(v string) {
	o.Name = v
}

// GetFormula returns the Formula field value if set, zero value otherwise.
// Deprecated
func (o *CreateReactorRequest) GetFormula() ReactorFormula {
	if o == nil || IsNil(o.Formula) {
		var ret ReactorFormula
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *CreateReactorRequest) GetFormulaOk() (*ReactorFormula, bool) {
	if o == nil || IsNil(o.Formula) {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field is not nil.
func (o *CreateReactorRequest) HasFormula() bool {
	if o != nil && !IsNil(o.Formula) {
		return true
	}

	return false
}

// SetFormula gets a reference to the given ReactorFormula and assigns it to the Formula field.
// Deprecated
func (o *CreateReactorRequest) SetFormula(v ReactorFormula) {
	o.Formula = &v
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateReactorRequest) GetCode() string {
	if o == nil || IsNil(o.Code.Get()) {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateReactorRequest) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field is not nil.
func (o *CreateReactorRequest) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *CreateReactorRequest) SetCode(v string) {
	o.Code.Set(&v)
}

// SetCodeNil sets the value for Code to be an explicit nil
func (o *CreateReactorRequest) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *CreateReactorRequest) UnsetCode() {
	o.Code.Unset()
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *CreateReactorRequest) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReactorRequest) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field is not nil.
func (o *CreateReactorRequest) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *CreateReactorRequest) SetApplication(v Application) {
	o.Application = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateReactorRequest) GetConfiguration() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateReactorRequest) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return &o.Configuration, true
}

// HasConfiguration returns a boolean if a field is not nil.
func (o *CreateReactorRequest) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *CreateReactorRequest) SetConfiguration(v map[string]string) {
	o.Configuration = v
}

func (o CreateReactorRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateReactorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Formula) {
		toSerialize["formula"] = o.Formula
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableCreateReactorRequest struct {
	value *CreateReactorRequest
	isSet bool
}

func (v NullableCreateReactorRequest) Get() *CreateReactorRequest {
	return v.value
}

func (v *NullableCreateReactorRequest) Set(val *CreateReactorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReactorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReactorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReactorRequest(val *CreateReactorRequest) *NullableCreateReactorRequest {
	return &NullableCreateReactorRequest{value: val, isSet: true}
}

func (v NullableCreateReactorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReactorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
