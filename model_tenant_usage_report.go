/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// TenantUsageReport struct for TenantUsageReport
type TenantUsageReport struct {
	TokenReport *TokenReport `json:"token_report,omitempty"`
}

// NewTenantUsageReport instantiates a new TenantUsageReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantUsageReport() *TenantUsageReport {
	this := TenantUsageReport{}
	return &this
}

// NewTenantUsageReportWithDefaults instantiates a new TenantUsageReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantUsageReportWithDefaults() *TenantUsageReport {
	this := TenantUsageReport{}
	return &this
}

// GetTokenReport returns the TokenReport field value if set, zero value otherwise.
func (o *TenantUsageReport) GetTokenReport() TokenReport {
	if o == nil || o.TokenReport == nil {
		var ret TokenReport
		return ret
	}
	return *o.TokenReport
}

// GetTokenReportOk returns a tuple with the TokenReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantUsageReport) GetTokenReportOk() (*TokenReport, bool) {
	if o == nil || o.TokenReport == nil {
		return nil, false
	}
	return o.TokenReport, true
}

// HasTokenReport returns a boolean if a field has been set.
func (o *TenantUsageReport) HasTokenReport() bool {
	if o != nil && o.TokenReport != nil {
		return true
	}

	return false
}

// SetTokenReport gets a reference to the given TokenReport and assigns it to the TokenReport field.
func (o *TenantUsageReport) SetTokenReport(v TokenReport) {
	o.TokenReport = &v
}

func (o TenantUsageReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TokenReport != nil {
		toSerialize["token_report"] = o.TokenReport
	}
	return json.Marshal(toSerialize)
}

type NullableTenantUsageReport struct {
	value *TenantUsageReport
	isSet bool
}

func (v NullableTenantUsageReport) Get() *TenantUsageReport {
	return v.value
}

func (v *NullableTenantUsageReport) Set(val *TenantUsageReport) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantUsageReport) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantUsageReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantUsageReport(val *TenantUsageReport) *NullableTenantUsageReport {
	return &NullableTenantUsageReport{value: val, isSet: true}
}

func (v NullableTenantUsageReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantUsageReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
