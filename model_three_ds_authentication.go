/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSAuthentication{}

// ThreeDSAuthentication struct for ThreeDSAuthentication
type ThreeDSAuthentication struct {
	// Deprecated
	PanTokenId                  NullableString            `json:"pan_token_id,omitempty"`
	TokenId                     NullableString            `json:"token_id,omitempty"`
	TokenIntentId               NullableString            `json:"token_intent_id,omitempty"`
	ThreedsVersion              NullableString            `json:"threeds_version,omitempty"`
	AcsTransactionId            NullableString            `json:"acs_transaction_id,omitempty"`
	DsTransactionId             NullableString            `json:"ds_transaction_id,omitempty"`
	SdkTransactionId            NullableString            `json:"sdk_transaction_id,omitempty"`
	AcsReferenceNumber          NullableString            `json:"acs_reference_number,omitempty"`
	DsReferenceNumber           NullableString            `json:"ds_reference_number,omitempty"`
	AuthenticationValue         NullableString            `json:"authentication_value,omitempty"`
	AuthenticationStatus        NullableString            `json:"authentication_status,omitempty"`
	AuthenticationStatusCode    NullableString            `json:"authentication_status_code,omitempty"`
	AuthenticationStatusReason  NullableString            `json:"authentication_status_reason,omitempty"`
	Eci                         NullableString            `json:"eci,omitempty"`
	AcsChallengeMandated        NullableString            `json:"acs_challenge_mandated,omitempty"`
	AcsDecoupledAuthentication  NullableString            `json:"acs_decoupled_authentication,omitempty"`
	AuthenticationChallengeType NullableString            `json:"authentication_challenge_type,omitempty"`
	AcsRenderingType            *ThreeDSAcsRenderingType  `json:"acs_rendering_type,omitempty"`
	AcsSignedContent            NullableString            `json:"acs_signed_content,omitempty"`
	AcsChallengeUrl             NullableString            `json:"acs_challenge_url,omitempty"`
	ChallengeAttempts           NullableString            `json:"challenge_attempts,omitempty"`
	ChallengeCancelReason       NullableString            `json:"challenge_cancel_reason,omitempty"`
	CardholderInfo              NullableString            `json:"cardholder_info,omitempty"`
	WhitelistStatus             NullableString            `json:"whitelist_status,omitempty"`
	WhitelistStatusSource       NullableString            `json:"whitelist_status_source,omitempty"`
	MessageExtensions           []ThreeDSMessageExtension `json:"message_extensions,omitempty"`
}

// NewThreeDSAuthentication instantiates a new ThreeDSAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSAuthentication() *ThreeDSAuthentication {
	this := ThreeDSAuthentication{}
	return &this
}

// NewThreeDSAuthenticationWithDefaults instantiates a new ThreeDSAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSAuthenticationWithDefaults() *ThreeDSAuthentication {
	this := ThreeDSAuthentication{}
	return &this
}

// GetPanTokenId returns the PanTokenId field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *ThreeDSAuthentication) GetPanTokenId() string {
	if o == nil || IsNil(o.PanTokenId.Get()) {
		var ret string
		return ret
	}
	return *o.PanTokenId.Get()
}

// GetPanTokenIdOk returns a tuple with the PanTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *ThreeDSAuthentication) GetPanTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PanTokenId.Get(), o.PanTokenId.IsSet()
}

// HasPanTokenId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasPanTokenId() bool {
	if o != nil && !IsNil(o.PanTokenId) {
		return true
	}

	return false
}

// SetPanTokenId gets a reference to the given NullableString and assigns it to the PanTokenId field.
// Deprecated
func (o *ThreeDSAuthentication) SetPanTokenId(v string) {
	o.PanTokenId.Set(&v)
}

// SetPanTokenIdNil sets the value for PanTokenId to be an explicit nil
func (o *ThreeDSAuthentication) SetPanTokenIdNil() {
	o.PanTokenId.Set(nil)
}

// UnsetPanTokenId ensures that no value is present for PanTokenId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetPanTokenId() {
	o.PanTokenId.Unset()
}

// GetTokenId returns the TokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetTokenId() string {
	if o == nil || IsNil(o.TokenId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// HasTokenId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasTokenId() bool {
	if o != nil && !IsNil(o.TokenId) {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given NullableString and assigns it to the TokenId field.
func (o *ThreeDSAuthentication) SetTokenId(v string) {
	o.TokenId.Set(&v)
}

// SetTokenIdNil sets the value for TokenId to be an explicit nil
func (o *ThreeDSAuthentication) SetTokenIdNil() {
	o.TokenId.Set(nil)
}

// UnsetTokenId ensures that no value is present for TokenId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetTokenId() {
	o.TokenId.Unset()
}

// GetTokenIntentId returns the TokenIntentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetTokenIntentId() string {
	if o == nil || IsNil(o.TokenIntentId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenIntentId.Get()
}

// GetTokenIntentIdOk returns a tuple with the TokenIntentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetTokenIntentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenIntentId.Get(), o.TokenIntentId.IsSet()
}

// HasTokenIntentId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasTokenIntentId() bool {
	if o != nil && !IsNil(o.TokenIntentId) {
		return true
	}

	return false
}

// SetTokenIntentId gets a reference to the given NullableString and assigns it to the TokenIntentId field.
func (o *ThreeDSAuthentication) SetTokenIntentId(v string) {
	o.TokenIntentId.Set(&v)
}

// SetTokenIntentIdNil sets the value for TokenIntentId to be an explicit nil
func (o *ThreeDSAuthentication) SetTokenIntentIdNil() {
	o.TokenIntentId.Set(nil)
}

// UnsetTokenIntentId ensures that no value is present for TokenIntentId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetTokenIntentId() {
	o.TokenIntentId.Unset()
}

// GetThreedsVersion returns the ThreedsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetThreedsVersion() string {
	if o == nil || IsNil(o.ThreedsVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ThreedsVersion.Get()
}

// GetThreedsVersionOk returns a tuple with the ThreedsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetThreedsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThreedsVersion.Get(), o.ThreedsVersion.IsSet()
}

// HasThreedsVersion returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasThreedsVersion() bool {
	if o != nil && !IsNil(o.ThreedsVersion) {
		return true
	}

	return false
}

// SetThreedsVersion gets a reference to the given NullableString and assigns it to the ThreedsVersion field.
func (o *ThreeDSAuthentication) SetThreedsVersion(v string) {
	o.ThreedsVersion.Set(&v)
}

// SetThreedsVersionNil sets the value for ThreedsVersion to be an explicit nil
func (o *ThreeDSAuthentication) SetThreedsVersionNil() {
	o.ThreedsVersion.Set(nil)
}

// UnsetThreedsVersion ensures that no value is present for ThreedsVersion, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetThreedsVersion() {
	o.ThreedsVersion.Unset()
}

// GetAcsTransactionId returns the AcsTransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsTransactionId() string {
	if o == nil || IsNil(o.AcsTransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.AcsTransactionId.Get()
}

// GetAcsTransactionIdOk returns a tuple with the AcsTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsTransactionId.Get(), o.AcsTransactionId.IsSet()
}

// HasAcsTransactionId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsTransactionId() bool {
	if o != nil && !IsNil(o.AcsTransactionId) {
		return true
	}

	return false
}

// SetAcsTransactionId gets a reference to the given NullableString and assigns it to the AcsTransactionId field.
func (o *ThreeDSAuthentication) SetAcsTransactionId(v string) {
	o.AcsTransactionId.Set(&v)
}

// SetAcsTransactionIdNil sets the value for AcsTransactionId to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsTransactionIdNil() {
	o.AcsTransactionId.Set(nil)
}

// UnsetAcsTransactionId ensures that no value is present for AcsTransactionId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsTransactionId() {
	o.AcsTransactionId.Unset()
}

// GetDsTransactionId returns the DsTransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetDsTransactionId() string {
	if o == nil || IsNil(o.DsTransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.DsTransactionId.Get()
}

// GetDsTransactionIdOk returns a tuple with the DsTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetDsTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DsTransactionId.Get(), o.DsTransactionId.IsSet()
}

// HasDsTransactionId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasDsTransactionId() bool {
	if o != nil && !IsNil(o.DsTransactionId) {
		return true
	}

	return false
}

// SetDsTransactionId gets a reference to the given NullableString and assigns it to the DsTransactionId field.
func (o *ThreeDSAuthentication) SetDsTransactionId(v string) {
	o.DsTransactionId.Set(&v)
}

// SetDsTransactionIdNil sets the value for DsTransactionId to be an explicit nil
func (o *ThreeDSAuthentication) SetDsTransactionIdNil() {
	o.DsTransactionId.Set(nil)
}

// UnsetDsTransactionId ensures that no value is present for DsTransactionId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetDsTransactionId() {
	o.DsTransactionId.Unset()
}

// GetSdkTransactionId returns the SdkTransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetSdkTransactionId() string {
	if o == nil || IsNil(o.SdkTransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.SdkTransactionId.Get()
}

// GetSdkTransactionIdOk returns a tuple with the SdkTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetSdkTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SdkTransactionId.Get(), o.SdkTransactionId.IsSet()
}

// HasSdkTransactionId returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasSdkTransactionId() bool {
	if o != nil && !IsNil(o.SdkTransactionId) {
		return true
	}

	return false
}

// SetSdkTransactionId gets a reference to the given NullableString and assigns it to the SdkTransactionId field.
func (o *ThreeDSAuthentication) SetSdkTransactionId(v string) {
	o.SdkTransactionId.Set(&v)
}

// SetSdkTransactionIdNil sets the value for SdkTransactionId to be an explicit nil
func (o *ThreeDSAuthentication) SetSdkTransactionIdNil() {
	o.SdkTransactionId.Set(nil)
}

// UnsetSdkTransactionId ensures that no value is present for SdkTransactionId, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetSdkTransactionId() {
	o.SdkTransactionId.Unset()
}

// GetAcsReferenceNumber returns the AcsReferenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsReferenceNumber() string {
	if o == nil || IsNil(o.AcsReferenceNumber.Get()) {
		var ret string
		return ret
	}
	return *o.AcsReferenceNumber.Get()
}

// GetAcsReferenceNumberOk returns a tuple with the AcsReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsReferenceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsReferenceNumber.Get(), o.AcsReferenceNumber.IsSet()
}

// HasAcsReferenceNumber returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsReferenceNumber() bool {
	if o != nil && !IsNil(o.AcsReferenceNumber) {
		return true
	}

	return false
}

// SetAcsReferenceNumber gets a reference to the given NullableString and assigns it to the AcsReferenceNumber field.
func (o *ThreeDSAuthentication) SetAcsReferenceNumber(v string) {
	o.AcsReferenceNumber.Set(&v)
}

// SetAcsReferenceNumberNil sets the value for AcsReferenceNumber to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsReferenceNumberNil() {
	o.AcsReferenceNumber.Set(nil)
}

// UnsetAcsReferenceNumber ensures that no value is present for AcsReferenceNumber, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsReferenceNumber() {
	o.AcsReferenceNumber.Unset()
}

// GetDsReferenceNumber returns the DsReferenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetDsReferenceNumber() string {
	if o == nil || IsNil(o.DsReferenceNumber.Get()) {
		var ret string
		return ret
	}
	return *o.DsReferenceNumber.Get()
}

// GetDsReferenceNumberOk returns a tuple with the DsReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetDsReferenceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DsReferenceNumber.Get(), o.DsReferenceNumber.IsSet()
}

// HasDsReferenceNumber returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasDsReferenceNumber() bool {
	if o != nil && !IsNil(o.DsReferenceNumber) {
		return true
	}

	return false
}

// SetDsReferenceNumber gets a reference to the given NullableString and assigns it to the DsReferenceNumber field.
func (o *ThreeDSAuthentication) SetDsReferenceNumber(v string) {
	o.DsReferenceNumber.Set(&v)
}

// SetDsReferenceNumberNil sets the value for DsReferenceNumber to be an explicit nil
func (o *ThreeDSAuthentication) SetDsReferenceNumberNil() {
	o.DsReferenceNumber.Set(nil)
}

// UnsetDsReferenceNumber ensures that no value is present for DsReferenceNumber, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetDsReferenceNumber() {
	o.DsReferenceNumber.Unset()
}

// GetAuthenticationValue returns the AuthenticationValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAuthenticationValue() string {
	if o == nil || IsNil(o.AuthenticationValue.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationValue.Get()
}

// GetAuthenticationValueOk returns a tuple with the AuthenticationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAuthenticationValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationValue.Get(), o.AuthenticationValue.IsSet()
}

// HasAuthenticationValue returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAuthenticationValue() bool {
	if o != nil && !IsNil(o.AuthenticationValue) {
		return true
	}

	return false
}

// SetAuthenticationValue gets a reference to the given NullableString and assigns it to the AuthenticationValue field.
func (o *ThreeDSAuthentication) SetAuthenticationValue(v string) {
	o.AuthenticationValue.Set(&v)
}

// SetAuthenticationValueNil sets the value for AuthenticationValue to be an explicit nil
func (o *ThreeDSAuthentication) SetAuthenticationValueNil() {
	o.AuthenticationValue.Set(nil)
}

// UnsetAuthenticationValue ensures that no value is present for AuthenticationValue, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAuthenticationValue() {
	o.AuthenticationValue.Unset()
}

// GetAuthenticationStatus returns the AuthenticationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAuthenticationStatus() string {
	if o == nil || IsNil(o.AuthenticationStatus.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationStatus.Get()
}

// GetAuthenticationStatusOk returns a tuple with the AuthenticationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAuthenticationStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationStatus.Get(), o.AuthenticationStatus.IsSet()
}

// HasAuthenticationStatus returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAuthenticationStatus() bool {
	if o != nil && !IsNil(o.AuthenticationStatus) {
		return true
	}

	return false
}

// SetAuthenticationStatus gets a reference to the given NullableString and assigns it to the AuthenticationStatus field.
func (o *ThreeDSAuthentication) SetAuthenticationStatus(v string) {
	o.AuthenticationStatus.Set(&v)
}

// SetAuthenticationStatusNil sets the value for AuthenticationStatus to be an explicit nil
func (o *ThreeDSAuthentication) SetAuthenticationStatusNil() {
	o.AuthenticationStatus.Set(nil)
}

// UnsetAuthenticationStatus ensures that no value is present for AuthenticationStatus, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAuthenticationStatus() {
	o.AuthenticationStatus.Unset()
}

// GetAuthenticationStatusCode returns the AuthenticationStatusCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAuthenticationStatusCode() string {
	if o == nil || IsNil(o.AuthenticationStatusCode.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationStatusCode.Get()
}

// GetAuthenticationStatusCodeOk returns a tuple with the AuthenticationStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAuthenticationStatusCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationStatusCode.Get(), o.AuthenticationStatusCode.IsSet()
}

// HasAuthenticationStatusCode returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAuthenticationStatusCode() bool {
	if o != nil && !IsNil(o.AuthenticationStatusCode) {
		return true
	}

	return false
}

// SetAuthenticationStatusCode gets a reference to the given NullableString and assigns it to the AuthenticationStatusCode field.
func (o *ThreeDSAuthentication) SetAuthenticationStatusCode(v string) {
	o.AuthenticationStatusCode.Set(&v)
}

// SetAuthenticationStatusCodeNil sets the value for AuthenticationStatusCode to be an explicit nil
func (o *ThreeDSAuthentication) SetAuthenticationStatusCodeNil() {
	o.AuthenticationStatusCode.Set(nil)
}

// UnsetAuthenticationStatusCode ensures that no value is present for AuthenticationStatusCode, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAuthenticationStatusCode() {
	o.AuthenticationStatusCode.Unset()
}

// GetAuthenticationStatusReason returns the AuthenticationStatusReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAuthenticationStatusReason() string {
	if o == nil || IsNil(o.AuthenticationStatusReason.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationStatusReason.Get()
}

// GetAuthenticationStatusReasonOk returns a tuple with the AuthenticationStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAuthenticationStatusReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationStatusReason.Get(), o.AuthenticationStatusReason.IsSet()
}

// HasAuthenticationStatusReason returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAuthenticationStatusReason() bool {
	if o != nil && !IsNil(o.AuthenticationStatusReason) {
		return true
	}

	return false
}

// SetAuthenticationStatusReason gets a reference to the given NullableString and assigns it to the AuthenticationStatusReason field.
func (o *ThreeDSAuthentication) SetAuthenticationStatusReason(v string) {
	o.AuthenticationStatusReason.Set(&v)
}

// SetAuthenticationStatusReasonNil sets the value for AuthenticationStatusReason to be an explicit nil
func (o *ThreeDSAuthentication) SetAuthenticationStatusReasonNil() {
	o.AuthenticationStatusReason.Set(nil)
}

// UnsetAuthenticationStatusReason ensures that no value is present for AuthenticationStatusReason, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAuthenticationStatusReason() {
	o.AuthenticationStatusReason.Unset()
}

// GetEci returns the Eci field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetEci() string {
	if o == nil || IsNil(o.Eci.Get()) {
		var ret string
		return ret
	}
	return *o.Eci.Get()
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetEciOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Eci.Get(), o.Eci.IsSet()
}

// HasEci returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasEci() bool {
	if o != nil && !IsNil(o.Eci) {
		return true
	}

	return false
}

// SetEci gets a reference to the given NullableString and assigns it to the Eci field.
func (o *ThreeDSAuthentication) SetEci(v string) {
	o.Eci.Set(&v)
}

// SetEciNil sets the value for Eci to be an explicit nil
func (o *ThreeDSAuthentication) SetEciNil() {
	o.Eci.Set(nil)
}

// UnsetEci ensures that no value is present for Eci, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetEci() {
	o.Eci.Unset()
}

// GetAcsChallengeMandated returns the AcsChallengeMandated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsChallengeMandated() string {
	if o == nil || IsNil(o.AcsChallengeMandated.Get()) {
		var ret string
		return ret
	}
	return *o.AcsChallengeMandated.Get()
}

// GetAcsChallengeMandatedOk returns a tuple with the AcsChallengeMandated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsChallengeMandatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsChallengeMandated.Get(), o.AcsChallengeMandated.IsSet()
}

// HasAcsChallengeMandated returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsChallengeMandated() bool {
	if o != nil && !IsNil(o.AcsChallengeMandated) {
		return true
	}

	return false
}

// SetAcsChallengeMandated gets a reference to the given NullableString and assigns it to the AcsChallengeMandated field.
func (o *ThreeDSAuthentication) SetAcsChallengeMandated(v string) {
	o.AcsChallengeMandated.Set(&v)
}

// SetAcsChallengeMandatedNil sets the value for AcsChallengeMandated to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsChallengeMandatedNil() {
	o.AcsChallengeMandated.Set(nil)
}

// UnsetAcsChallengeMandated ensures that no value is present for AcsChallengeMandated, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsChallengeMandated() {
	o.AcsChallengeMandated.Unset()
}

// GetAcsDecoupledAuthentication returns the AcsDecoupledAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsDecoupledAuthentication() string {
	if o == nil || IsNil(o.AcsDecoupledAuthentication.Get()) {
		var ret string
		return ret
	}
	return *o.AcsDecoupledAuthentication.Get()
}

// GetAcsDecoupledAuthenticationOk returns a tuple with the AcsDecoupledAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsDecoupledAuthenticationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsDecoupledAuthentication.Get(), o.AcsDecoupledAuthentication.IsSet()
}

// HasAcsDecoupledAuthentication returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsDecoupledAuthentication() bool {
	if o != nil && !IsNil(o.AcsDecoupledAuthentication) {
		return true
	}

	return false
}

// SetAcsDecoupledAuthentication gets a reference to the given NullableString and assigns it to the AcsDecoupledAuthentication field.
func (o *ThreeDSAuthentication) SetAcsDecoupledAuthentication(v string) {
	o.AcsDecoupledAuthentication.Set(&v)
}

// SetAcsDecoupledAuthenticationNil sets the value for AcsDecoupledAuthentication to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsDecoupledAuthenticationNil() {
	o.AcsDecoupledAuthentication.Set(nil)
}

// UnsetAcsDecoupledAuthentication ensures that no value is present for AcsDecoupledAuthentication, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsDecoupledAuthentication() {
	o.AcsDecoupledAuthentication.Unset()
}

// GetAuthenticationChallengeType returns the AuthenticationChallengeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAuthenticationChallengeType() string {
	if o == nil || IsNil(o.AuthenticationChallengeType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationChallengeType.Get()
}

// GetAuthenticationChallengeTypeOk returns a tuple with the AuthenticationChallengeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAuthenticationChallengeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationChallengeType.Get(), o.AuthenticationChallengeType.IsSet()
}

// HasAuthenticationChallengeType returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAuthenticationChallengeType() bool {
	if o != nil && !IsNil(o.AuthenticationChallengeType) {
		return true
	}

	return false
}

// SetAuthenticationChallengeType gets a reference to the given NullableString and assigns it to the AuthenticationChallengeType field.
func (o *ThreeDSAuthentication) SetAuthenticationChallengeType(v string) {
	o.AuthenticationChallengeType.Set(&v)
}

// SetAuthenticationChallengeTypeNil sets the value for AuthenticationChallengeType to be an explicit nil
func (o *ThreeDSAuthentication) SetAuthenticationChallengeTypeNil() {
	o.AuthenticationChallengeType.Set(nil)
}

// UnsetAuthenticationChallengeType ensures that no value is present for AuthenticationChallengeType, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAuthenticationChallengeType() {
	o.AuthenticationChallengeType.Unset()
}

// GetAcsRenderingType returns the AcsRenderingType field value if set, zero value otherwise.
func (o *ThreeDSAuthentication) GetAcsRenderingType() ThreeDSAcsRenderingType {
	if o == nil || IsNil(o.AcsRenderingType) {
		var ret ThreeDSAcsRenderingType
		return ret
	}
	return *o.AcsRenderingType
}

// GetAcsRenderingTypeOk returns a tuple with the AcsRenderingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSAuthentication) GetAcsRenderingTypeOk() (*ThreeDSAcsRenderingType, bool) {
	if o == nil || IsNil(o.AcsRenderingType) {
		return nil, false
	}
	return o.AcsRenderingType, true
}

// HasAcsRenderingType returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsRenderingType() bool {
	if o != nil && !IsNil(o.AcsRenderingType) {
		return true
	}

	return false
}

// SetAcsRenderingType gets a reference to the given ThreeDSAcsRenderingType and assigns it to the AcsRenderingType field.
func (o *ThreeDSAuthentication) SetAcsRenderingType(v ThreeDSAcsRenderingType) {
	o.AcsRenderingType = &v
}

// GetAcsSignedContent returns the AcsSignedContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsSignedContent() string {
	if o == nil || IsNil(o.AcsSignedContent.Get()) {
		var ret string
		return ret
	}
	return *o.AcsSignedContent.Get()
}

// GetAcsSignedContentOk returns a tuple with the AcsSignedContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsSignedContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsSignedContent.Get(), o.AcsSignedContent.IsSet()
}

// HasAcsSignedContent returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsSignedContent() bool {
	if o != nil && !IsNil(o.AcsSignedContent) {
		return true
	}

	return false
}

// SetAcsSignedContent gets a reference to the given NullableString and assigns it to the AcsSignedContent field.
func (o *ThreeDSAuthentication) SetAcsSignedContent(v string) {
	o.AcsSignedContent.Set(&v)
}

// SetAcsSignedContentNil sets the value for AcsSignedContent to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsSignedContentNil() {
	o.AcsSignedContent.Set(nil)
}

// UnsetAcsSignedContent ensures that no value is present for AcsSignedContent, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsSignedContent() {
	o.AcsSignedContent.Unset()
}

// GetAcsChallengeUrl returns the AcsChallengeUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetAcsChallengeUrl() string {
	if o == nil || IsNil(o.AcsChallengeUrl.Get()) {
		var ret string
		return ret
	}
	return *o.AcsChallengeUrl.Get()
}

// GetAcsChallengeUrlOk returns a tuple with the AcsChallengeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetAcsChallengeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsChallengeUrl.Get(), o.AcsChallengeUrl.IsSet()
}

// HasAcsChallengeUrl returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasAcsChallengeUrl() bool {
	if o != nil && !IsNil(o.AcsChallengeUrl) {
		return true
	}

	return false
}

// SetAcsChallengeUrl gets a reference to the given NullableString and assigns it to the AcsChallengeUrl field.
func (o *ThreeDSAuthentication) SetAcsChallengeUrl(v string) {
	o.AcsChallengeUrl.Set(&v)
}

// SetAcsChallengeUrlNil sets the value for AcsChallengeUrl to be an explicit nil
func (o *ThreeDSAuthentication) SetAcsChallengeUrlNil() {
	o.AcsChallengeUrl.Set(nil)
}

// UnsetAcsChallengeUrl ensures that no value is present for AcsChallengeUrl, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetAcsChallengeUrl() {
	o.AcsChallengeUrl.Unset()
}

// GetChallengeAttempts returns the ChallengeAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetChallengeAttempts() string {
	if o == nil || IsNil(o.ChallengeAttempts.Get()) {
		var ret string
		return ret
	}
	return *o.ChallengeAttempts.Get()
}

// GetChallengeAttemptsOk returns a tuple with the ChallengeAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetChallengeAttemptsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChallengeAttempts.Get(), o.ChallengeAttempts.IsSet()
}

// HasChallengeAttempts returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasChallengeAttempts() bool {
	if o != nil && !IsNil(o.ChallengeAttempts) {
		return true
	}

	return false
}

// SetChallengeAttempts gets a reference to the given NullableString and assigns it to the ChallengeAttempts field.
func (o *ThreeDSAuthentication) SetChallengeAttempts(v string) {
	o.ChallengeAttempts.Set(&v)
}

// SetChallengeAttemptsNil sets the value for ChallengeAttempts to be an explicit nil
func (o *ThreeDSAuthentication) SetChallengeAttemptsNil() {
	o.ChallengeAttempts.Set(nil)
}

// UnsetChallengeAttempts ensures that no value is present for ChallengeAttempts, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetChallengeAttempts() {
	o.ChallengeAttempts.Unset()
}

// GetChallengeCancelReason returns the ChallengeCancelReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetChallengeCancelReason() string {
	if o == nil || IsNil(o.ChallengeCancelReason.Get()) {
		var ret string
		return ret
	}
	return *o.ChallengeCancelReason.Get()
}

// GetChallengeCancelReasonOk returns a tuple with the ChallengeCancelReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetChallengeCancelReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChallengeCancelReason.Get(), o.ChallengeCancelReason.IsSet()
}

// HasChallengeCancelReason returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasChallengeCancelReason() bool {
	if o != nil && !IsNil(o.ChallengeCancelReason) {
		return true
	}

	return false
}

// SetChallengeCancelReason gets a reference to the given NullableString and assigns it to the ChallengeCancelReason field.
func (o *ThreeDSAuthentication) SetChallengeCancelReason(v string) {
	o.ChallengeCancelReason.Set(&v)
}

// SetChallengeCancelReasonNil sets the value for ChallengeCancelReason to be an explicit nil
func (o *ThreeDSAuthentication) SetChallengeCancelReasonNil() {
	o.ChallengeCancelReason.Set(nil)
}

// UnsetChallengeCancelReason ensures that no value is present for ChallengeCancelReason, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetChallengeCancelReason() {
	o.ChallengeCancelReason.Unset()
}

// GetCardholderInfo returns the CardholderInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetCardholderInfo() string {
	if o == nil || IsNil(o.CardholderInfo.Get()) {
		var ret string
		return ret
	}
	return *o.CardholderInfo.Get()
}

// GetCardholderInfoOk returns a tuple with the CardholderInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetCardholderInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CardholderInfo.Get(), o.CardholderInfo.IsSet()
}

// HasCardholderInfo returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasCardholderInfo() bool {
	if o != nil && !IsNil(o.CardholderInfo) {
		return true
	}

	return false
}

// SetCardholderInfo gets a reference to the given NullableString and assigns it to the CardholderInfo field.
func (o *ThreeDSAuthentication) SetCardholderInfo(v string) {
	o.CardholderInfo.Set(&v)
}

// SetCardholderInfoNil sets the value for CardholderInfo to be an explicit nil
func (o *ThreeDSAuthentication) SetCardholderInfoNil() {
	o.CardholderInfo.Set(nil)
}

// UnsetCardholderInfo ensures that no value is present for CardholderInfo, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetCardholderInfo() {
	o.CardholderInfo.Unset()
}

// GetWhitelistStatus returns the WhitelistStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetWhitelistStatus() string {
	if o == nil || IsNil(o.WhitelistStatus.Get()) {
		var ret string
		return ret
	}
	return *o.WhitelistStatus.Get()
}

// GetWhitelistStatusOk returns a tuple with the WhitelistStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetWhitelistStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhitelistStatus.Get(), o.WhitelistStatus.IsSet()
}

// HasWhitelistStatus returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasWhitelistStatus() bool {
	if o != nil && !IsNil(o.WhitelistStatus) {
		return true
	}

	return false
}

// SetWhitelistStatus gets a reference to the given NullableString and assigns it to the WhitelistStatus field.
func (o *ThreeDSAuthentication) SetWhitelistStatus(v string) {
	o.WhitelistStatus.Set(&v)
}

// SetWhitelistStatusNil sets the value for WhitelistStatus to be an explicit nil
func (o *ThreeDSAuthentication) SetWhitelistStatusNil() {
	o.WhitelistStatus.Set(nil)
}

// UnsetWhitelistStatus ensures that no value is present for WhitelistStatus, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetWhitelistStatus() {
	o.WhitelistStatus.Unset()
}

// GetWhitelistStatusSource returns the WhitelistStatusSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetWhitelistStatusSource() string {
	if o == nil || IsNil(o.WhitelistStatusSource.Get()) {
		var ret string
		return ret
	}
	return *o.WhitelistStatusSource.Get()
}

// GetWhitelistStatusSourceOk returns a tuple with the WhitelistStatusSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetWhitelistStatusSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhitelistStatusSource.Get(), o.WhitelistStatusSource.IsSet()
}

// HasWhitelistStatusSource returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasWhitelistStatusSource() bool {
	if o != nil && !IsNil(o.WhitelistStatusSource) {
		return true
	}

	return false
}

// SetWhitelistStatusSource gets a reference to the given NullableString and assigns it to the WhitelistStatusSource field.
func (o *ThreeDSAuthentication) SetWhitelistStatusSource(v string) {
	o.WhitelistStatusSource.Set(&v)
}

// SetWhitelistStatusSourceNil sets the value for WhitelistStatusSource to be an explicit nil
func (o *ThreeDSAuthentication) SetWhitelistStatusSourceNil() {
	o.WhitelistStatusSource.Set(nil)
}

// UnsetWhitelistStatusSource ensures that no value is present for WhitelistStatusSource, not even an explicit nil
func (o *ThreeDSAuthentication) UnsetWhitelistStatusSource() {
	o.WhitelistStatusSource.Unset()
}

// GetMessageExtensions returns the MessageExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAuthentication) GetMessageExtensions() []ThreeDSMessageExtension {
	if o == nil {
		var ret []ThreeDSMessageExtension
		return ret
	}
	return o.MessageExtensions
}

// GetMessageExtensionsOk returns a tuple with the MessageExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAuthentication) GetMessageExtensionsOk() ([]ThreeDSMessageExtension, bool) {
	if o == nil || IsNil(o.MessageExtensions) {
		return nil, false
	}
	return o.MessageExtensions, true
}

// HasMessageExtensions returns a boolean if a field is not nil.
func (o *ThreeDSAuthentication) HasMessageExtensions() bool {
	if o != nil && !IsNil(o.MessageExtensions) {
		return true
	}

	return false
}

// SetMessageExtensions gets a reference to the given []ThreeDSMessageExtension and assigns it to the MessageExtensions field.
func (o *ThreeDSAuthentication) SetMessageExtensions(v []ThreeDSMessageExtension) {
	o.MessageExtensions = v
}

func (o ThreeDSAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PanTokenId.IsSet() {
		toSerialize["pan_token_id"] = o.PanTokenId.Get()
	}
	if o.TokenId.IsSet() {
		toSerialize["token_id"] = o.TokenId.Get()
	}
	if o.TokenIntentId.IsSet() {
		toSerialize["token_intent_id"] = o.TokenIntentId.Get()
	}
	if o.ThreedsVersion.IsSet() {
		toSerialize["threeds_version"] = o.ThreedsVersion.Get()
	}
	if o.AcsTransactionId.IsSet() {
		toSerialize["acs_transaction_id"] = o.AcsTransactionId.Get()
	}
	if o.DsTransactionId.IsSet() {
		toSerialize["ds_transaction_id"] = o.DsTransactionId.Get()
	}
	if o.SdkTransactionId.IsSet() {
		toSerialize["sdk_transaction_id"] = o.SdkTransactionId.Get()
	}
	if o.AcsReferenceNumber.IsSet() {
		toSerialize["acs_reference_number"] = o.AcsReferenceNumber.Get()
	}
	if o.DsReferenceNumber.IsSet() {
		toSerialize["ds_reference_number"] = o.DsReferenceNumber.Get()
	}
	if o.AuthenticationValue.IsSet() {
		toSerialize["authentication_value"] = o.AuthenticationValue.Get()
	}
	if o.AuthenticationStatus.IsSet() {
		toSerialize["authentication_status"] = o.AuthenticationStatus.Get()
	}
	if o.AuthenticationStatusCode.IsSet() {
		toSerialize["authentication_status_code"] = o.AuthenticationStatusCode.Get()
	}
	if o.AuthenticationStatusReason.IsSet() {
		toSerialize["authentication_status_reason"] = o.AuthenticationStatusReason.Get()
	}
	if o.Eci.IsSet() {
		toSerialize["eci"] = o.Eci.Get()
	}
	if o.AcsChallengeMandated.IsSet() {
		toSerialize["acs_challenge_mandated"] = o.AcsChallengeMandated.Get()
	}
	if o.AcsDecoupledAuthentication.IsSet() {
		toSerialize["acs_decoupled_authentication"] = o.AcsDecoupledAuthentication.Get()
	}
	if o.AuthenticationChallengeType.IsSet() {
		toSerialize["authentication_challenge_type"] = o.AuthenticationChallengeType.Get()
	}
	if !IsNil(o.AcsRenderingType) {
		toSerialize["acs_rendering_type"] = o.AcsRenderingType
	}
	if o.AcsSignedContent.IsSet() {
		toSerialize["acs_signed_content"] = o.AcsSignedContent.Get()
	}
	if o.AcsChallengeUrl.IsSet() {
		toSerialize["acs_challenge_url"] = o.AcsChallengeUrl.Get()
	}
	if o.ChallengeAttempts.IsSet() {
		toSerialize["challenge_attempts"] = o.ChallengeAttempts.Get()
	}
	if o.ChallengeCancelReason.IsSet() {
		toSerialize["challenge_cancel_reason"] = o.ChallengeCancelReason.Get()
	}
	if o.CardholderInfo.IsSet() {
		toSerialize["cardholder_info"] = o.CardholderInfo.Get()
	}
	if o.WhitelistStatus.IsSet() {
		toSerialize["whitelist_status"] = o.WhitelistStatus.Get()
	}
	if o.WhitelistStatusSource.IsSet() {
		toSerialize["whitelist_status_source"] = o.WhitelistStatusSource.Get()
	}
	if o.MessageExtensions != nil {
		toSerialize["message_extensions"] = o.MessageExtensions
	}
	return toSerialize, nil
}

type NullableThreeDSAuthentication struct {
	value *ThreeDSAuthentication
	isSet bool
}

func (v NullableThreeDSAuthentication) Get() *ThreeDSAuthentication {
	return v.value
}

func (v *NullableThreeDSAuthentication) Set(val *ThreeDSAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSAuthentication(val *ThreeDSAuthentication) *NullableThreeDSAuthentication {
	return &NullableThreeDSAuthentication{value: val, isSet: true}
}

func (v NullableThreeDSAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
