/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// CreateTokenRequest struct for CreateTokenRequest
type CreateTokenRequest struct {
	Type NullableString `json:"type,omitempty"`
	Data interface{} `json:"data"`
	Encryption *EncryptionMetadata `json:"encryption,omitempty"`
	Privacy *Privacy `json:"privacy,omitempty"`
	Metadata map[string]string `json:"metadata,omitempty"`
	SearchIndexes []string `json:"search_indexes,omitempty"`
	FingerprintExpression NullableString `json:"fingerprint_expression,omitempty"`
	DeduplicateToken NullableBool `json:"deduplicate_token,omitempty"`
}

// NewCreateTokenRequest instantiates a new CreateTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTokenRequest(data interface{}) *CreateTokenRequest {
	this := CreateTokenRequest{}
	this.Data = data
	return &this
}

// NewCreateTokenRequestWithDefaults instantiates a new CreateTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTokenRequestWithDefaults() *CreateTokenRequest {
	this := CreateTokenRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateTokenRequest) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CreateTokenRequest) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CreateTokenRequest) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CreateTokenRequest) UnsetType() {
	o.Type.Unset()
}

// GetData returns the Data field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CreateTokenRequest) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetDataOk() (*interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CreateTokenRequest) SetData(v interface{}) {
	o.Data = v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetEncryption() EncryptionMetadata {
	if o == nil || o.Encryption == nil {
		var ret EncryptionMetadata
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetEncryptionOk() (*EncryptionMetadata, bool) {
	if o == nil || o.Encryption == nil {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasEncryption() bool {
	if o != nil && o.Encryption != nil {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given EncryptionMetadata and assigns it to the Encryption field.
func (o *CreateTokenRequest) SetEncryption(v EncryptionMetadata) {
	o.Encryption = &v
}

// GetPrivacy returns the Privacy field value if set, zero value otherwise.
func (o *CreateTokenRequest) GetPrivacy() Privacy {
	if o == nil || o.Privacy == nil {
		var ret Privacy
		return ret
	}
	return *o.Privacy
}

// GetPrivacyOk returns a tuple with the Privacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTokenRequest) GetPrivacyOk() (*Privacy, bool) {
	if o == nil || o.Privacy == nil {
		return nil, false
	}
	return o.Privacy, true
}

// HasPrivacy returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasPrivacy() bool {
	if o != nil && o.Privacy != nil {
		return true
	}

	return false
}

// SetPrivacy gets a reference to the given Privacy and assigns it to the Privacy field.
func (o *CreateTokenRequest) SetPrivacy(v Privacy) {
	o.Privacy = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateTokenRequest) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CreateTokenRequest) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetSearchIndexes returns the SearchIndexes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateTokenRequest) GetSearchIndexes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SearchIndexes
}

// GetSearchIndexesOk returns a tuple with the SearchIndexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetSearchIndexesOk() ([]string, bool) {
	if o == nil || o.SearchIndexes == nil {
		return nil, false
	}
	return o.SearchIndexes, true
}

// HasSearchIndexes returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasSearchIndexes() bool {
	if o != nil && o.SearchIndexes != nil {
		return true
	}

	return false
}

// SetSearchIndexes gets a reference to the given []string and assigns it to the SearchIndexes field.
func (o *CreateTokenRequest) SetSearchIndexes(v []string) {
	o.SearchIndexes = v
}

// GetFingerprintExpression returns the FingerprintExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateTokenRequest) GetFingerprintExpression() string {
	if o == nil || o.FingerprintExpression.Get() == nil {
		var ret string
		return ret
	}
	return *o.FingerprintExpression.Get()
}

// GetFingerprintExpressionOk returns a tuple with the FingerprintExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetFingerprintExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FingerprintExpression.Get(), o.FingerprintExpression.IsSet()
}

// HasFingerprintExpression returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasFingerprintExpression() bool {
	if o != nil && o.FingerprintExpression.IsSet() {
		return true
	}

	return false
}

// SetFingerprintExpression gets a reference to the given NullableString and assigns it to the FingerprintExpression field.
func (o *CreateTokenRequest) SetFingerprintExpression(v string) {
	o.FingerprintExpression.Set(&v)
}
// SetFingerprintExpressionNil sets the value for FingerprintExpression to be an explicit nil
func (o *CreateTokenRequest) SetFingerprintExpressionNil() {
	o.FingerprintExpression.Set(nil)
}

// UnsetFingerprintExpression ensures that no value is present for FingerprintExpression, not even an explicit nil
func (o *CreateTokenRequest) UnsetFingerprintExpression() {
	o.FingerprintExpression.Unset()
}

// GetDeduplicateToken returns the DeduplicateToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateTokenRequest) GetDeduplicateToken() bool {
	if o == nil || o.DeduplicateToken.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DeduplicateToken.Get()
}

// GetDeduplicateTokenOk returns a tuple with the DeduplicateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateTokenRequest) GetDeduplicateTokenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeduplicateToken.Get(), o.DeduplicateToken.IsSet()
}

// HasDeduplicateToken returns a boolean if a field has been set.
func (o *CreateTokenRequest) HasDeduplicateToken() bool {
	if o != nil && o.DeduplicateToken.IsSet() {
		return true
	}

	return false
}

// SetDeduplicateToken gets a reference to the given NullableBool and assigns it to the DeduplicateToken field.
func (o *CreateTokenRequest) SetDeduplicateToken(v bool) {
	o.DeduplicateToken.Set(&v)
}
// SetDeduplicateTokenNil sets the value for DeduplicateToken to be an explicit nil
func (o *CreateTokenRequest) SetDeduplicateTokenNil() {
	o.DeduplicateToken.Set(nil)
}

// UnsetDeduplicateToken ensures that no value is present for DeduplicateToken, not even an explicit nil
func (o *CreateTokenRequest) UnsetDeduplicateToken() {
	o.DeduplicateToken.Unset()
}

func (o CreateTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Encryption != nil {
		toSerialize["encryption"] = o.Encryption
	}
	if o.Privacy != nil {
		toSerialize["privacy"] = o.Privacy
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.SearchIndexes != nil {
		toSerialize["search_indexes"] = o.SearchIndexes
	}
	if o.FingerprintExpression.IsSet() {
		toSerialize["fingerprint_expression"] = o.FingerprintExpression.Get()
	}
	if o.DeduplicateToken.IsSet() {
		toSerialize["deduplicate_token"] = o.DeduplicateToken.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateTokenRequest struct {
	value *CreateTokenRequest
	isSet bool
}

func (v NullableCreateTokenRequest) Get() *CreateTokenRequest {
	return v.value
}

func (v *NullableCreateTokenRequest) Set(val *CreateTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTokenRequest(val *CreateTokenRequest) *NullableCreateTokenRequest {
	return &NullableCreateTokenRequest{value: val, isSet: true}
}

func (v NullableCreateTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


