/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ReactRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactRequest{}

// ReactRequest struct for ReactRequest
type ReactRequest struct {
	Args        interface{}    `json:"args,omitempty"`
	CallbackUrl NullableString `json:"callback_url,omitempty"`
}

// NewReactRequest instantiates a new ReactRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactRequest() *ReactRequest {
	this := ReactRequest{}
	return &this
}

// NewReactRequestWithDefaults instantiates a new ReactRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactRequestWithDefaults() *ReactRequest {
	this := ReactRequest{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReactRequest) GetArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReactRequest) GetArgsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return &o.Args, true
}

// HasArgs returns a boolean if a field is not nil.
func (o *ReactRequest) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given interface{} and assigns it to the Args field.
func (o *ReactRequest) SetArgs(v interface{}) {
	o.Args = v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReactRequest) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReactRequest) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field is not nil.
func (o *ReactRequest) HasCallbackUrl() bool {
	if o != nil && !IsNil(o.CallbackUrl) {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *ReactRequest) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}

// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *ReactRequest) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *ReactRequest) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

func (o ReactRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	return toSerialize, nil
}

type NullableReactRequest struct {
	value *ReactRequest
	isSet bool
}

func (v NullableReactRequest) Get() *ReactRequest {
	return v.value
}

func (v *NullableReactRequest) Set(val *ReactRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReactRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReactRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactRequest(val *ReactRequest) *NullableReactRequest {
	return &NullableReactRequest{value: val, isSet: true}
}

func (v NullableReactRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
