/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSAcsRenderingType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSAcsRenderingType{}

// ThreeDSAcsRenderingType struct for ThreeDSAcsRenderingType
type ThreeDSAcsRenderingType struct {
	AcsInterface  NullableString `json:"acsInterface,omitempty"`
	AcsUiTemplate NullableString `json:"acsUiTemplate,omitempty"`
}

// NewThreeDSAcsRenderingType instantiates a new ThreeDSAcsRenderingType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSAcsRenderingType() *ThreeDSAcsRenderingType {
	this := ThreeDSAcsRenderingType{}
	return &this
}

// NewThreeDSAcsRenderingTypeWithDefaults instantiates a new ThreeDSAcsRenderingType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSAcsRenderingTypeWithDefaults() *ThreeDSAcsRenderingType {
	this := ThreeDSAcsRenderingType{}
	return &this
}

// GetAcsInterface returns the AcsInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAcsRenderingType) GetAcsInterface() string {
	if o == nil || IsNil(o.AcsInterface.Get()) {
		var ret string
		return ret
	}
	return *o.AcsInterface.Get()
}

// GetAcsInterfaceOk returns a tuple with the AcsInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAcsRenderingType) GetAcsInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsInterface.Get(), o.AcsInterface.IsSet()
}

// HasAcsInterface returns a boolean if a field is not nil.
func (o *ThreeDSAcsRenderingType) HasAcsInterface() bool {
	if o != nil && !IsNil(o.AcsInterface) {
		return true
	}

	return false
}

// SetAcsInterface gets a reference to the given NullableString and assigns it to the AcsInterface field.
func (o *ThreeDSAcsRenderingType) SetAcsInterface(v string) {
	o.AcsInterface.Set(&v)
}

// SetAcsInterfaceNil sets the value for AcsInterface to be an explicit nil
func (o *ThreeDSAcsRenderingType) SetAcsInterfaceNil() {
	o.AcsInterface.Set(nil)
}

// UnsetAcsInterface ensures that no value is present for AcsInterface, not even an explicit nil
func (o *ThreeDSAcsRenderingType) UnsetAcsInterface() {
	o.AcsInterface.Unset()
}

// GetAcsUiTemplate returns the AcsUiTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSAcsRenderingType) GetAcsUiTemplate() string {
	if o == nil || IsNil(o.AcsUiTemplate.Get()) {
		var ret string
		return ret
	}
	return *o.AcsUiTemplate.Get()
}

// GetAcsUiTemplateOk returns a tuple with the AcsUiTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSAcsRenderingType) GetAcsUiTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcsUiTemplate.Get(), o.AcsUiTemplate.IsSet()
}

// HasAcsUiTemplate returns a boolean if a field is not nil.
func (o *ThreeDSAcsRenderingType) HasAcsUiTemplate() bool {
	if o != nil && !IsNil(o.AcsUiTemplate) {
		return true
	}

	return false
}

// SetAcsUiTemplate gets a reference to the given NullableString and assigns it to the AcsUiTemplate field.
func (o *ThreeDSAcsRenderingType) SetAcsUiTemplate(v string) {
	o.AcsUiTemplate.Set(&v)
}

// SetAcsUiTemplateNil sets the value for AcsUiTemplate to be an explicit nil
func (o *ThreeDSAcsRenderingType) SetAcsUiTemplateNil() {
	o.AcsUiTemplate.Set(nil)
}

// UnsetAcsUiTemplate ensures that no value is present for AcsUiTemplate, not even an explicit nil
func (o *ThreeDSAcsRenderingType) UnsetAcsUiTemplate() {
	o.AcsUiTemplate.Unset()
}

func (o ThreeDSAcsRenderingType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSAcsRenderingType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AcsInterface.IsSet() {
		toSerialize["acsInterface"] = o.AcsInterface.Get()
	}
	if o.AcsUiTemplate.IsSet() {
		toSerialize["acsUiTemplate"] = o.AcsUiTemplate.Get()
	}
	return toSerialize, nil
}

type NullableThreeDSAcsRenderingType struct {
	value *ThreeDSAcsRenderingType
	isSet bool
}

func (v NullableThreeDSAcsRenderingType) Get() *ThreeDSAcsRenderingType {
	return v.value
}

func (v *NullableThreeDSAcsRenderingType) Set(val *ThreeDSAcsRenderingType) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSAcsRenderingType) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSAcsRenderingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSAcsRenderingType(val *ThreeDSAcsRenderingType) *NullableThreeDSAcsRenderingType {
	return &NullableThreeDSAcsRenderingType{value: val, isSet: true}
}

func (v NullableThreeDSAcsRenderingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSAcsRenderingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
