/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the ThreeDSMessageExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreeDSMessageExtension{}

// ThreeDSMessageExtension struct for ThreeDSMessageExtension
type ThreeDSMessageExtension struct {
	Id       NullableString `json:"id,omitempty"`
	Name     NullableString `json:"name,omitempty"`
	Critical NullableBool   `json:"critical,omitempty"`
	Data     interface{}    `json:"data,omitempty"`
}

// NewThreeDSMessageExtension instantiates a new ThreeDSMessageExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSMessageExtension() *ThreeDSMessageExtension {
	this := ThreeDSMessageExtension{}
	return &this
}

// NewThreeDSMessageExtensionWithDefaults instantiates a new ThreeDSMessageExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSMessageExtensionWithDefaults() *ThreeDSMessageExtension {
	this := ThreeDSMessageExtension{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSMessageExtension) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSMessageExtension) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field is not nil.
func (o *ThreeDSMessageExtension) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ThreeDSMessageExtension) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *ThreeDSMessageExtension) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ThreeDSMessageExtension) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSMessageExtension) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSMessageExtension) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field is not nil.
func (o *ThreeDSMessageExtension) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ThreeDSMessageExtension) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *ThreeDSMessageExtension) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ThreeDSMessageExtension) UnsetName() {
	o.Name.Unset()
}

// GetCritical returns the Critical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSMessageExtension) GetCritical() bool {
	if o == nil || IsNil(o.Critical.Get()) {
		var ret bool
		return ret
	}
	return *o.Critical.Get()
}

// GetCriticalOk returns a tuple with the Critical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSMessageExtension) GetCriticalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Critical.Get(), o.Critical.IsSet()
}

// HasCritical returns a boolean if a field is not nil.
func (o *ThreeDSMessageExtension) HasCritical() bool {
	if o != nil && !IsNil(o.Critical) {
		return true
	}

	return false
}

// SetCritical gets a reference to the given NullableBool and assigns it to the Critical field.
func (o *ThreeDSMessageExtension) SetCritical(v bool) {
	o.Critical.Set(&v)
}

// SetCriticalNil sets the value for Critical to be an explicit nil
func (o *ThreeDSMessageExtension) SetCriticalNil() {
	o.Critical.Set(nil)
}

// UnsetCritical ensures that no value is present for Critical, not even an explicit nil
func (o *ThreeDSMessageExtension) UnsetCritical() {
	o.Critical.Unset()
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSMessageExtension) GetData() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSMessageExtension) GetDataOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return &o.Data, true
}

// HasData returns a boolean if a field is not nil.
func (o *ThreeDSMessageExtension) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given interface{} and assigns it to the Data field.
func (o *ThreeDSMessageExtension) SetData(v interface{}) {
	o.Data = v
}

func (o ThreeDSMessageExtension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreeDSMessageExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Critical.IsSet() {
		toSerialize["critical"] = o.Critical.Get()
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableThreeDSMessageExtension struct {
	value *ThreeDSMessageExtension
	isSet bool
}

func (v NullableThreeDSMessageExtension) Get() *ThreeDSMessageExtension {
	return v.value
}

func (v *NullableThreeDSMessageExtension) Set(val *ThreeDSMessageExtension) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSMessageExtension) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSMessageExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSMessageExtension(val *ThreeDSMessageExtension) *NullableThreeDSMessageExtension {
	return &NullableThreeDSMessageExtension{value: val, isSet: true}
}

func (v NullableThreeDSMessageExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSMessageExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
