/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Server to Server Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// UpdateAtomicBankRequest struct for UpdateAtomicBankRequest
type UpdateAtomicBankRequest struct {
	Bank Bank `json:"bank"`
}

// NewUpdateAtomicBankRequest instantiates a new UpdateAtomicBankRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAtomicBankRequest(bank Bank) *UpdateAtomicBankRequest {
	this := UpdateAtomicBankRequest{}
	this.Bank = bank
	return &this
}

// NewUpdateAtomicBankRequestWithDefaults instantiates a new UpdateAtomicBankRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAtomicBankRequestWithDefaults() *UpdateAtomicBankRequest {
	this := UpdateAtomicBankRequest{}
	return &this
}

// GetBank returns the Bank field value
func (o *UpdateAtomicBankRequest) GetBank() Bank {
	if o == nil {
		var ret Bank
		return ret
	}

	return o.Bank
}

// GetBankOk returns a tuple with the Bank field value
// and a boolean to check if the value has been set.
func (o *UpdateAtomicBankRequest) GetBankOk() (*Bank, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bank, true
}

// SetBank sets field value
func (o *UpdateAtomicBankRequest) SetBank(v Bank) {
	o.Bank = v
}

func (o UpdateAtomicBankRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bank"] = o.Bank
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAtomicBankRequest struct {
	value *UpdateAtomicBankRequest
	isSet bool
}

func (v NullableUpdateAtomicBankRequest) Get() *UpdateAtomicBankRequest {
	return v.value
}

func (v *NullableUpdateAtomicBankRequest) Set(val *UpdateAtomicBankRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAtomicBankRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAtomicBankRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAtomicBankRequest(val *UpdateAtomicBankRequest) *NullableUpdateAtomicBankRequest {
	return &NullableUpdateAtomicBankRequest{value: val, isSet: true}
}

func (v NullableUpdateAtomicBankRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAtomicBankRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
