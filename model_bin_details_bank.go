/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the BinDetailsBank type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BinDetailsBank{}

// BinDetailsBank struct for BinDetailsBank
type BinDetailsBank struct {
	Name      NullableString `json:"name,omitempty"`
	Phone     NullableString `json:"phone,omitempty"`
	Url       NullableString `json:"url,omitempty"`
	CleanName NullableString `json:"clean_name,omitempty"`
}

// NewBinDetailsBank instantiates a new BinDetailsBank object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinDetailsBank() *BinDetailsBank {
	this := BinDetailsBank{}
	return &this
}

// NewBinDetailsBankWithDefaults instantiates a new BinDetailsBank object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinDetailsBankWithDefaults() *BinDetailsBank {
	this := BinDetailsBank{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetailsBank) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetailsBank) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field is not nil.
func (o *BinDetailsBank) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BinDetailsBank) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *BinDetailsBank) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BinDetailsBank) UnsetName() {
	o.Name.Unset()
}

// GetPhone returns the Phone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetailsBank) GetPhone() string {
	if o == nil || IsNil(o.Phone.Get()) {
		var ret string
		return ret
	}
	return *o.Phone.Get()
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetailsBank) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phone.Get(), o.Phone.IsSet()
}

// HasPhone returns a boolean if a field is not nil.
func (o *BinDetailsBank) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given NullableString and assigns it to the Phone field.
func (o *BinDetailsBank) SetPhone(v string) {
	o.Phone.Set(&v)
}

// SetPhoneNil sets the value for Phone to be an explicit nil
func (o *BinDetailsBank) SetPhoneNil() {
	o.Phone.Set(nil)
}

// UnsetPhone ensures that no value is present for Phone, not even an explicit nil
func (o *BinDetailsBank) UnsetPhone() {
	o.Phone.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetailsBank) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetailsBank) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field is not nil.
func (o *BinDetailsBank) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *BinDetailsBank) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *BinDetailsBank) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *BinDetailsBank) UnsetUrl() {
	o.Url.Unset()
}

// GetCleanName returns the CleanName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BinDetailsBank) GetCleanName() string {
	if o == nil || IsNil(o.CleanName.Get()) {
		var ret string
		return ret
	}
	return *o.CleanName.Get()
}

// GetCleanNameOk returns a tuple with the CleanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BinDetailsBank) GetCleanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CleanName.Get(), o.CleanName.IsSet()
}

// HasCleanName returns a boolean if a field is not nil.
func (o *BinDetailsBank) HasCleanName() bool {
	if o != nil && !IsNil(o.CleanName) {
		return true
	}

	return false
}

// SetCleanName gets a reference to the given NullableString and assigns it to the CleanName field.
func (o *BinDetailsBank) SetCleanName(v string) {
	o.CleanName.Set(&v)
}

// SetCleanNameNil sets the value for CleanName to be an explicit nil
func (o *BinDetailsBank) SetCleanNameNil() {
	o.CleanName.Set(nil)
}

// UnsetCleanName ensures that no value is present for CleanName, not even an explicit nil
func (o *BinDetailsBank) UnsetCleanName() {
	o.CleanName.Unset()
}

func (o BinDetailsBank) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BinDetailsBank) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Phone.IsSet() {
		toSerialize["phone"] = o.Phone.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.CleanName.IsSet() {
		toSerialize["clean_name"] = o.CleanName.Get()
	}
	return toSerialize, nil
}

type NullableBinDetailsBank struct {
	value *BinDetailsBank
	isSet bool
}

func (v NullableBinDetailsBank) Get() *BinDetailsBank {
	return v.value
}

func (v *NullableBinDetailsBank) Set(val *BinDetailsBank) {
	v.value = val
	v.isSet = true
}

func (v NullableBinDetailsBank) IsSet() bool {
	return v.isSet
}

func (v *NullableBinDetailsBank) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinDetailsBank(val *BinDetailsBank) *NullableBinDetailsBank {
	return &NullableBinDetailsBank{value: val, isSet: true}
}

func (v NullableBinDetailsBank) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinDetailsBank) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
