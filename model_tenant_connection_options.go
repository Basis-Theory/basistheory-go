/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the TenantConnectionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantConnectionOptions{}

// TenantConnectionOptions struct for TenantConnectionOptions
type TenantConnectionOptions struct {
	DomainAliases []string `json:"domain_aliases,omitempty"`
}

// NewTenantConnectionOptions instantiates a new TenantConnectionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantConnectionOptions() *TenantConnectionOptions {
	this := TenantConnectionOptions{}
	return &this
}

// NewTenantConnectionOptionsWithDefaults instantiates a new TenantConnectionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantConnectionOptionsWithDefaults() *TenantConnectionOptions {
	this := TenantConnectionOptions{}
	return &this
}

// GetDomainAliases returns the DomainAliases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConnectionOptions) GetDomainAliases() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DomainAliases
}

// GetDomainAliasesOk returns a tuple with the DomainAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConnectionOptions) GetDomainAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainAliases) {
		return nil, false
	}
	return o.DomainAliases, true
}

// HasDomainAliases returns a boolean if a field is not nil.
func (o *TenantConnectionOptions) HasDomainAliases() bool {
	if o != nil && !IsNil(o.DomainAliases) {
		return true
	}

	return false
}

// SetDomainAliases gets a reference to the given []string and assigns it to the DomainAliases field.
func (o *TenantConnectionOptions) SetDomainAliases(v []string) {
	o.DomainAliases = v
}

func (o TenantConnectionOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantConnectionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainAliases != nil {
		toSerialize["domain_aliases"] = o.DomainAliases
	}
	return toSerialize, nil
}

type NullableTenantConnectionOptions struct {
	value *TenantConnectionOptions
	isSet bool
}

func (v NullableTenantConnectionOptions) Get() *TenantConnectionOptions {
	return v.value
}

func (v *NullableTenantConnectionOptions) Set(val *TenantConnectionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantConnectionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantConnectionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantConnectionOptions(val *TenantConnectionOptions) *NullableTenantConnectionOptions {
	return &NullableTenantConnectionOptions{value: val, isSet: true}
}

func (v NullableTenantConnectionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantConnectionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
