/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the SearchTokensRequestV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchTokensRequestV2{}

// SearchTokensRequestV2 struct for SearchTokensRequestV2
type SearchTokensRequestV2 struct {
	Query NullableString `json:"query,omitempty"`
	Start NullableString `json:"start,omitempty"`
	Size  NullableInt32  `json:"size,omitempty"`
}

// NewSearchTokensRequestV2 instantiates a new SearchTokensRequestV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTokensRequestV2() *SearchTokensRequestV2 {
	this := SearchTokensRequestV2{}
	return &this
}

// NewSearchTokensRequestV2WithDefaults instantiates a new SearchTokensRequestV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTokensRequestV2WithDefaults() *SearchTokensRequestV2 {
	this := SearchTokensRequestV2{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchTokensRequestV2) GetQuery() string {
	if o == nil || IsNil(o.Query.Get()) {
		var ret string
		return ret
	}
	return *o.Query.Get()
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchTokensRequestV2) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Query.Get(), o.Query.IsSet()
}

// HasQuery returns a boolean if a field is not nil.
func (o *SearchTokensRequestV2) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given NullableString and assigns it to the Query field.
func (o *SearchTokensRequestV2) SetQuery(v string) {
	o.Query.Set(&v)
}

// SetQueryNil sets the value for Query to be an explicit nil
func (o *SearchTokensRequestV2) SetQueryNil() {
	o.Query.Set(nil)
}

// UnsetQuery ensures that no value is present for Query, not even an explicit nil
func (o *SearchTokensRequestV2) UnsetQuery() {
	o.Query.Unset()
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchTokensRequestV2) GetStart() string {
	if o == nil || IsNil(o.Start.Get()) {
		var ret string
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchTokensRequestV2) GetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field is not nil.
func (o *SearchTokensRequestV2) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableString and assigns it to the Start field.
func (o *SearchTokensRequestV2) SetStart(v string) {
	o.Start.Set(&v)
}

// SetStartNil sets the value for Start to be an explicit nil
func (o *SearchTokensRequestV2) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *SearchTokensRequestV2) UnsetStart() {
	o.Start.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchTokensRequestV2) GetSize() int32 {
	if o == nil || IsNil(o.Size.Get()) {
		var ret int32
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchTokensRequestV2) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field is not nil.
func (o *SearchTokensRequestV2) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt32 and assigns it to the Size field.
func (o *SearchTokensRequestV2) SetSize(v int32) {
	o.Size.Set(&v)
}

// SetSizeNil sets the value for Size to be an explicit nil
func (o *SearchTokensRequestV2) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *SearchTokensRequestV2) UnsetSize() {
	o.Size.Unset()
}

func (o SearchTokensRequestV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchTokensRequestV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Query.IsSet() {
		toSerialize["query"] = o.Query.Get()
	}
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	return toSerialize, nil
}

type NullableSearchTokensRequestV2 struct {
	value *SearchTokensRequestV2
	isSet bool
}

func (v NullableSearchTokensRequestV2) Get() *SearchTokensRequestV2 {
	return v.value
}

func (v *NullableSearchTokensRequestV2) Set(val *SearchTokensRequestV2) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTokensRequestV2) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTokensRequestV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTokensRequestV2(val *SearchTokensRequestV2) *NullableSearchTokensRequestV2 {
	return &NullableSearchTokensRequestV2{value: val, isSet: true}
}

func (v NullableSearchTokensRequestV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTokensRequestV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
