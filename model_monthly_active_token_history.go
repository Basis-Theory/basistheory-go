/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// MonthlyActiveTokenHistory struct for MonthlyActiveTokenHistory
type MonthlyActiveTokenHistory struct {
	Year  *int32 `json:"year,omitempty"`
	Month *int32 `json:"month,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewMonthlyActiveTokenHistory instantiates a new MonthlyActiveTokenHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyActiveTokenHistory() *MonthlyActiveTokenHistory {
	this := MonthlyActiveTokenHistory{}
	return &this
}

// NewMonthlyActiveTokenHistoryWithDefaults instantiates a new MonthlyActiveTokenHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyActiveTokenHistoryWithDefaults() *MonthlyActiveTokenHistory {
	this := MonthlyActiveTokenHistory{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *MonthlyActiveTokenHistory) GetYear() int32 {
	if o == nil || isNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyActiveTokenHistory) GetYearOk() (*int32, bool) {
	if o == nil || isNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *MonthlyActiveTokenHistory) HasYear() bool {
	if o != nil && !isNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *MonthlyActiveTokenHistory) SetYear(v int32) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *MonthlyActiveTokenHistory) GetMonth() int32 {
	if o == nil || isNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyActiveTokenHistory) GetMonthOk() (*int32, bool) {
	if o == nil || isNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *MonthlyActiveTokenHistory) HasMonth() bool {
	if o != nil && !isNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *MonthlyActiveTokenHistory) SetMonth(v int32) {
	o.Month = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MonthlyActiveTokenHistory) GetCount() int64 {
	if o == nil || isNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyActiveTokenHistory) GetCountOk() (*int64, bool) {
	if o == nil || isNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MonthlyActiveTokenHistory) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *MonthlyActiveTokenHistory) SetCount(v int64) {
	o.Count = &v
}

func (o MonthlyActiveTokenHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !isNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableMonthlyActiveTokenHistory struct {
	value *MonthlyActiveTokenHistory
	isSet bool
}

func (v NullableMonthlyActiveTokenHistory) Get() *MonthlyActiveTokenHistory {
	return v.value
}

func (v *NullableMonthlyActiveTokenHistory) Set(val *MonthlyActiveTokenHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyActiveTokenHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyActiveTokenHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyActiveTokenHistory(val *MonthlyActiveTokenHistory) *NullableMonthlyActiveTokenHistory {
	return &NullableMonthlyActiveTokenHistory{value: val, isSet: true}
}

func (v NullableMonthlyActiveTokenHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyActiveTokenHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
