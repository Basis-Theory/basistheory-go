/*
Basis Theory API

## Getting Started * Sign-in to [Basis Theory](https://basistheory.com) and go to [Applications](https://portal.basistheory.com/applications) * Create a Basis Theory Private Application * All permissions should be selected * Paste the API Key into the `BT-API-KEY` variable

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// checks if the AuthorizeSessionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeSessionRequest{}

// AuthorizeSessionRequest struct for AuthorizeSessionRequest
type AuthorizeSessionRequest struct {
	Nonce       string         `json:"nonce"`
	ExpiresAt   NullableString `json:"expires_at,omitempty"`
	Permissions []string       `json:"permissions,omitempty"`
	Rules       []AccessRule   `json:"rules,omitempty"`
}

// NewAuthorizeSessionRequest instantiates a new AuthorizeSessionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeSessionRequest(nonce string) *AuthorizeSessionRequest {
	this := AuthorizeSessionRequest{}
	this.Nonce = nonce
	return &this
}

// NewAuthorizeSessionRequestWithDefaults instantiates a new AuthorizeSessionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeSessionRequestWithDefaults() *AuthorizeSessionRequest {
	this := AuthorizeSessionRequest{}
	return &this
}

// GetNonce returns the Nonce field value
func (o *AuthorizeSessionRequest) GetNonce() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value
// and a boolean to check if the value has been set.
func (o *AuthorizeSessionRequest) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nonce, true
}

// SetNonce sets field value
func (o *AuthorizeSessionRequest) SetNonce(v string) {
	o.Nonce = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeSessionRequest) GetExpiresAt() string {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret string
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeSessionRequest) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field is not nil.
func (o *AuthorizeSessionRequest) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableString and assigns it to the ExpiresAt field.
func (o *AuthorizeSessionRequest) SetExpiresAt(v string) {
	o.ExpiresAt.Set(&v)
}

// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *AuthorizeSessionRequest) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *AuthorizeSessionRequest) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeSessionRequest) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeSessionRequest) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field is not nil.
func (o *AuthorizeSessionRequest) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *AuthorizeSessionRequest) SetPermissions(v []string) {
	o.Permissions = v
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthorizeSessionRequest) GetRules() []AccessRule {
	if o == nil {
		var ret []AccessRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthorizeSessionRequest) GetRulesOk() ([]AccessRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field is not nil.
func (o *AuthorizeSessionRequest) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []AccessRule and assigns it to the Rules field.
func (o *AuthorizeSessionRequest) SetRules(v []AccessRule) {
	o.Rules = v
}

func (o AuthorizeSessionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeSessionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nonce"] = o.Nonce
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableAuthorizeSessionRequest struct {
	value *AuthorizeSessionRequest
	isSet bool
}

func (v NullableAuthorizeSessionRequest) Get() *AuthorizeSessionRequest {
	return v.value
}

func (v *NullableAuthorizeSessionRequest) Set(val *AuthorizeSessionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeSessionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeSessionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeSessionRequest(val *AuthorizeSessionRequest) *NullableAuthorizeSessionRequest {
	return &NullableAuthorizeSessionRequest{value: val, isSet: true}
}

func (v NullableAuthorizeSessionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeSessionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
