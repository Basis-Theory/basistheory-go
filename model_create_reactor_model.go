/*
BasisTheory Vault API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package basistheory

import (
	"encoding/json"
)

// CreateReactorModel struct for CreateReactorModel
type CreateReactorModel struct {
	Name NullableString `json:"name,omitempty"`
	Formula *ReactorFormulaModel `json:"formula,omitempty"`
	Configuration map[string]string `json:"configuration,omitempty"`
}

// NewCreateReactorModel instantiates a new CreateReactorModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateReactorModel() *CreateReactorModel {
	this := CreateReactorModel{}
	return &this
}

// NewCreateReactorModelWithDefaults instantiates a new CreateReactorModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateReactorModelWithDefaults() *CreateReactorModel {
	this := CreateReactorModel{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateReactorModel) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateReactorModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateReactorModel) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateReactorModel) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateReactorModel) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateReactorModel) UnsetName() {
	o.Name.Unset()
}

// GetFormula returns the Formula field value if set, zero value otherwise.
func (o *CreateReactorModel) GetFormula() ReactorFormulaModel {
	if o == nil || o.Formula == nil {
		var ret ReactorFormulaModel
		return ret
	}
	return *o.Formula
}

// GetFormulaOk returns a tuple with the Formula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateReactorModel) GetFormulaOk() (*ReactorFormulaModel, bool) {
	if o == nil || o.Formula == nil {
		return nil, false
	}
	return o.Formula, true
}

// HasFormula returns a boolean if a field has been set.
func (o *CreateReactorModel) HasFormula() bool {
	if o != nil && o.Formula != nil {
		return true
	}

	return false
}

// SetFormula gets a reference to the given ReactorFormulaModel and assigns it to the Formula field.
func (o *CreateReactorModel) SetFormula(v ReactorFormulaModel) {
	o.Formula = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateReactorModel) GetConfiguration() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateReactorModel) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil || o.Configuration == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *CreateReactorModel) HasConfiguration() bool {
	if o != nil && o.Configuration != nil {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]string and assigns it to the Configuration field.
func (o *CreateReactorModel) SetConfiguration(v map[string]string) {
	o.Configuration = v
}

func (o CreateReactorModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Formula != nil {
		toSerialize["formula"] = o.Formula
	}
	if o.Configuration != nil {
		toSerialize["configuration"] = o.Configuration
	}
	return json.Marshal(toSerialize)
}

type NullableCreateReactorModel struct {
	value *CreateReactorModel
	isSet bool
}

func (v NullableCreateReactorModel) Get() *CreateReactorModel {
	return v.value
}

func (v *NullableCreateReactorModel) Set(val *CreateReactorModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateReactorModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateReactorModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateReactorModel(val *CreateReactorModel) *NullableCreateReactorModel {
	return &NullableCreateReactorModel{value: val, isSet: true}
}

func (v NullableCreateReactorModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateReactorModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


